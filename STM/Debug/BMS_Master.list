
BMS_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006814  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006aac  08006aac  00007aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006ae4  08006ae4  00007ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006aec  08006aec  00007aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006af0  08006af0  00007af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08006af4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08006b04  00008010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08006b64  00008070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000710  240000d0  08006bc4  000080d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240007e0  08006bc4  000087e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019852  00000000  00000000  000080fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b17  00000000  00000000  00021950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  00024468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d33  00000000  00000000  00025578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000385e1  00000000  00000000  000262ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016eb8  00000000  00000000  0005e88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00164a19  00000000  00000000  00075744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001da15d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000492c  00000000  00000000  001da1a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001deacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006a94 	.word	0x08006a94

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006a94 	.word	0x08006a94

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fdce 	bl	800116c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f80c 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 f9aa 	bl	800092c <MX_GPIO_Init>
  MX_ETH_Init();
 80005d8:	f000 f888 	bl	80006ec <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005dc:	f000 f928 	bl	8000830 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e0:	f000 f972 	bl	80008c8 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80005e4:	f000 f8ce 	bl	8000784 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <main+0x20>

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b09c      	sub	sp, #112	@ 0x70
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005f6:	224c      	movs	r2, #76	@ 0x4c
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f006 fa1d 	bl	8006a3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2220      	movs	r2, #32
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f006 fa17 	bl	8006a3a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800060c:	2002      	movs	r0, #2
 800060e:	f001 fe95 	bl	800233c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000612:	2300      	movs	r3, #0
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	4b33      	ldr	r3, [pc, #204]	@ (80006e4 <SystemClock_Config+0xf8>)
 8000618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800061a:	4a32      	ldr	r2, [pc, #200]	@ (80006e4 <SystemClock_Config+0xf8>)
 800061c:	f023 0301 	bic.w	r3, r3, #1
 8000620:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000622:	4b30      	ldr	r3, [pc, #192]	@ (80006e4 <SystemClock_Config+0xf8>)
 8000624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	4b2e      	ldr	r3, [pc, #184]	@ (80006e8 <SystemClock_Config+0xfc>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000634:	4a2c      	ldr	r2, [pc, #176]	@ (80006e8 <SystemClock_Config+0xfc>)
 8000636:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b2a      	ldr	r3, [pc, #168]	@ (80006e8 <SystemClock_Config+0xfc>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000648:	bf00      	nop
 800064a:	4b27      	ldr	r3, [pc, #156]	@ (80006e8 <SystemClock_Config+0xfc>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000652:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000656:	d1f8      	bne.n	800064a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000658:	2303      	movs	r3, #3
 800065a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800065c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000660:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000662:	2301      	movs	r3, #1
 8000664:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000666:	2340      	movs	r3, #64	@ 0x40
 8000668:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	2302      	movs	r3, #2
 8000670:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000672:	2301      	movs	r3, #1
 8000674:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000676:	2318      	movs	r3, #24
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800067a:	2302      	movs	r3, #2
 800067c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800067e:	2304      	movs	r3, #4
 8000680:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000682:	2302      	movs	r3, #2
 8000684:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000686:	230c      	movs	r3, #12
 8000688:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800068a:	2300      	movs	r3, #0
 800068c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000696:	4618      	mov	r0, r3
 8000698:	f001 fe9a 	bl	80023d0 <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006a2:	f000 fa1f 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	233f      	movs	r3, #63	@ 0x3f
 80006a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2101      	movs	r1, #1
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 fada 	bl	8002c84 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xee>
  {
    Error_Handler();
 80006d6:	f000 fa05 	bl	8000ae4 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3770      	adds	r7, #112	@ 0x70
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	58000400 	.word	0x58000400
 80006e8:	58024800 	.word	0x58024800

080006ec <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006f0:	4b1e      	ldr	r3, [pc, #120]	@ (800076c <MX_ETH_Init+0x80>)
 80006f2:	4a1f      	ldr	r2, [pc, #124]	@ (8000770 <MX_ETH_Init+0x84>)
 80006f4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000774 <MX_ETH_Init+0x88>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <MX_ETH_Init+0x88>)
 80006fe:	2280      	movs	r2, #128	@ 0x80
 8000700:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000702:	4b1c      	ldr	r3, [pc, #112]	@ (8000774 <MX_ETH_Init+0x88>)
 8000704:	22e1      	movs	r2, #225	@ 0xe1
 8000706:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000708:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <MX_ETH_Init+0x88>)
 800070a:	2200      	movs	r2, #0
 800070c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800070e:	4b19      	ldr	r3, [pc, #100]	@ (8000774 <MX_ETH_Init+0x88>)
 8000710:	2200      	movs	r2, #0
 8000712:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000714:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <MX_ETH_Init+0x88>)
 8000716:	2200      	movs	r2, #0
 8000718:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_ETH_Init+0x80>)
 800071c:	4a15      	ldr	r2, [pc, #84]	@ (8000774 <MX_ETH_Init+0x88>)
 800071e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000720:	4b12      	ldr	r3, [pc, #72]	@ (800076c <MX_ETH_Init+0x80>)
 8000722:	2201      	movs	r2, #1
 8000724:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_ETH_Init+0x80>)
 8000728:	4a13      	ldr	r2, [pc, #76]	@ (8000778 <MX_ETH_Init+0x8c>)
 800072a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800072c:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <MX_ETH_Init+0x80>)
 800072e:	4a13      	ldr	r2, [pc, #76]	@ (800077c <MX_ETH_Init+0x90>)
 8000730:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_ETH_Init+0x80>)
 8000734:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000738:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800073a:	480c      	ldr	r0, [pc, #48]	@ (800076c <MX_ETH_Init+0x80>)
 800073c:	f000 fed0 	bl	80014e0 <HAL_ETH_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000746:	f000 f9cd 	bl	8000ae4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800074a:	2238      	movs	r2, #56	@ 0x38
 800074c:	2100      	movs	r1, #0
 800074e:	480c      	ldr	r0, [pc, #48]	@ (8000780 <MX_ETH_Init+0x94>)
 8000750:	f006 f973 	bl	8006a3a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000754:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <MX_ETH_Init+0x94>)
 8000756:	2221      	movs	r2, #33	@ 0x21
 8000758:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800075a:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <MX_ETH_Init+0x94>)
 800075c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000760:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000762:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <MX_ETH_Init+0x94>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	24000124 	.word	0x24000124
 8000770:	40028000 	.word	0x40028000
 8000774:	240007d4 	.word	0x240007d4
 8000778:	24000070 	.word	0x24000070
 800077c:	24000010 	.word	0x24000010
 8000780:	240000ec 	.word	0x240000ec

08000784 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000788:	4b27      	ldr	r3, [pc, #156]	@ (8000828 <MX_SPI1_Init+0xa4>)
 800078a:	4a28      	ldr	r2, [pc, #160]	@ (800082c <MX_SPI1_Init+0xa8>)
 800078c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800078e:	4b26      	ldr	r3, [pc, #152]	@ (8000828 <MX_SPI1_Init+0xa4>)
 8000790:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000794:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000796:	4b24      	ldr	r3, [pc, #144]	@ (8000828 <MX_SPI1_Init+0xa4>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800079c:	4b22      	ldr	r3, [pc, #136]	@ (8000828 <MX_SPI1_Init+0xa4>)
 800079e:	2203      	movs	r2, #3
 80007a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a2:	4b21      	ldr	r3, [pc, #132]	@ (8000828 <MX_SPI1_Init+0xa4>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000828 <MX_SPI1_Init+0xa4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000828 <MX_SPI1_Init+0xa4>)
 80007b0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80007b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000828 <MX_SPI1_Init+0xa4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <MX_SPI1_Init+0xa4>)
 80007be:	2200      	movs	r2, #0
 80007c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c2:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <MX_SPI1_Init+0xa4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c8:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <MX_SPI1_Init+0xa4>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80007ce:	4b16      	ldr	r3, [pc, #88]	@ (8000828 <MX_SPI1_Init+0xa4>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007d4:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <MX_SPI1_Init+0xa4>)
 80007d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007da:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80007dc:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <MX_SPI1_Init+0xa4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_SPI1_Init+0xa4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_SPI1_Init+0xa4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <MX_SPI1_Init+0xa4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_SPI1_Init+0xa4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <MX_SPI1_Init+0xa4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000800:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_SPI1_Init+0xa4>)
 8000802:	2200      	movs	r2, #0
 8000804:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000806:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <MX_SPI1_Init+0xa4>)
 8000808:	2200      	movs	r2, #0
 800080a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_SPI1_Init+0xa4>)
 800080e:	2200      	movs	r2, #0
 8000810:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_SPI1_Init+0xa4>)
 8000814:	f004 fbee 	bl	8004ff4 <HAL_SPI_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800081e:	f000 f961 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	240001d4 	.word	0x240001d4
 800082c:	40013000 	.word	0x40013000

08000830 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000834:	4b22      	ldr	r3, [pc, #136]	@ (80008c0 <MX_USART3_UART_Init+0x90>)
 8000836:	4a23      	ldr	r2, [pc, #140]	@ (80008c4 <MX_USART3_UART_Init+0x94>)
 8000838:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800083a:	4b21      	ldr	r3, [pc, #132]	@ (80008c0 <MX_USART3_UART_Init+0x90>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b1f      	ldr	r3, [pc, #124]	@ (80008c0 <MX_USART3_UART_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b1d      	ldr	r3, [pc, #116]	@ (80008c0 <MX_USART3_UART_Init+0x90>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800084e:	4b1c      	ldr	r3, [pc, #112]	@ (80008c0 <MX_USART3_UART_Init+0x90>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <MX_USART3_UART_Init+0x90>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b19      	ldr	r3, [pc, #100]	@ (80008c0 <MX_USART3_UART_Init+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b17      	ldr	r3, [pc, #92]	@ (80008c0 <MX_USART3_UART_Init+0x90>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000866:	4b16      	ldr	r3, [pc, #88]	@ (80008c0 <MX_USART3_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800086c:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <MX_USART3_UART_Init+0x90>)
 800086e:	2200      	movs	r2, #0
 8000870:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000872:	4b13      	ldr	r3, [pc, #76]	@ (80008c0 <MX_USART3_UART_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000878:	4811      	ldr	r0, [pc, #68]	@ (80008c0 <MX_USART3_UART_Init+0x90>)
 800087a:	f004 fcfa 	bl	8005272 <HAL_UART_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000884:	f000 f92e 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000888:	2100      	movs	r1, #0
 800088a:	480d      	ldr	r0, [pc, #52]	@ (80008c0 <MX_USART3_UART_Init+0x90>)
 800088c:	f005 fd03 	bl	8006296 <HAL_UARTEx_SetTxFifoThreshold>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000896:	f000 f925 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800089a:	2100      	movs	r1, #0
 800089c:	4808      	ldr	r0, [pc, #32]	@ (80008c0 <MX_USART3_UART_Init+0x90>)
 800089e:	f005 fd38 	bl	8006312 <HAL_UARTEx_SetRxFifoThreshold>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008a8:	f000 f91c 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <MX_USART3_UART_Init+0x90>)
 80008ae:	f005 fcb9 	bl	8006224 <HAL_UARTEx_DisableFifoMode>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008b8:	f000 f914 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2400025c 	.word	0x2400025c
 80008c4:	40004800 	.word	0x40004800

080008c8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008cc:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ce:	4a16      	ldr	r2, [pc, #88]	@ (8000928 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80008d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80008d2:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008d4:	2209      	movs	r2, #9
 80008d6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008d8:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008da:	2202      	movs	r2, #2
 80008dc:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008de:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008e6:	2202      	movs	r2, #2
 80008e8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80008fc:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008fe:	2201      	movs	r2, #1
 8000900:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000902:	4b08      	ldr	r3, [pc, #32]	@ (8000924 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000904:	2201      	movs	r2, #1
 8000906:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800090a:	2200      	movs	r2, #0
 800090c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	@ (8000924 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000910:	f001 fbe3 	bl	80020da <HAL_PCD_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800091a:	f000 f8e3 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	240002f0 	.word	0x240002f0
 8000928:	40080000 	.word	0x40080000

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08c      	sub	sp, #48	@ 0x30
 8000930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	4b62      	ldr	r3, [pc, #392]	@ (8000acc <MX_GPIO_Init+0x1a0>)
 8000944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000948:	4a60      	ldr	r2, [pc, #384]	@ (8000acc <MX_GPIO_Init+0x1a0>)
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000952:	4b5e      	ldr	r3, [pc, #376]	@ (8000acc <MX_GPIO_Init+0x1a0>)
 8000954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	61bb      	str	r3, [r7, #24]
 800095e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000960:	4b5a      	ldr	r3, [pc, #360]	@ (8000acc <MX_GPIO_Init+0x1a0>)
 8000962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000966:	4a59      	ldr	r2, [pc, #356]	@ (8000acc <MX_GPIO_Init+0x1a0>)
 8000968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800096c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000970:	4b56      	ldr	r3, [pc, #344]	@ (8000acc <MX_GPIO_Init+0x1a0>)
 8000972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b53      	ldr	r3, [pc, #332]	@ (8000acc <MX_GPIO_Init+0x1a0>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000984:	4a51      	ldr	r2, [pc, #324]	@ (8000acc <MX_GPIO_Init+0x1a0>)
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098e:	4b4f      	ldr	r3, [pc, #316]	@ (8000acc <MX_GPIO_Init+0x1a0>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099c:	4b4b      	ldr	r3, [pc, #300]	@ (8000acc <MX_GPIO_Init+0x1a0>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a2:	4a4a      	ldr	r2, [pc, #296]	@ (8000acc <MX_GPIO_Init+0x1a0>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ac:	4b47      	ldr	r3, [pc, #284]	@ (8000acc <MX_GPIO_Init+0x1a0>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	4b44      	ldr	r3, [pc, #272]	@ (8000acc <MX_GPIO_Init+0x1a0>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c0:	4a42      	ldr	r2, [pc, #264]	@ (8000acc <MX_GPIO_Init+0x1a0>)
 80009c2:	f043 0308 	orr.w	r3, r3, #8
 80009c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ca:	4b40      	ldr	r3, [pc, #256]	@ (8000acc <MX_GPIO_Init+0x1a0>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d0:	f003 0308 	and.w	r3, r3, #8
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d8:	4b3c      	ldr	r3, [pc, #240]	@ (8000acc <MX_GPIO_Init+0x1a0>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009de:	4a3b      	ldr	r2, [pc, #236]	@ (8000acc <MX_GPIO_Init+0x1a0>)
 80009e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e8:	4b38      	ldr	r3, [pc, #224]	@ (8000acc <MX_GPIO_Init+0x1a0>)
 80009ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009f6:	4b35      	ldr	r3, [pc, #212]	@ (8000acc <MX_GPIO_Init+0x1a0>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fc:	4a33      	ldr	r2, [pc, #204]	@ (8000acc <MX_GPIO_Init+0x1a0>)
 80009fe:	f043 0310 	orr.w	r3, r3, #16
 8000a02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a06:	4b31      	ldr	r3, [pc, #196]	@ (8000acc <MX_GPIO_Init+0x1a0>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0c:	f003 0310 	and.w	r3, r3, #16
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a1a:	482d      	ldr	r0, [pc, #180]	@ (8000ad0 <MX_GPIO_Init+0x1a4>)
 8000a1c:	f001 fb44 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a20:	2200      	movs	r2, #0
 8000a22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a26:	482b      	ldr	r0, [pc, #172]	@ (8000ad4 <MX_GPIO_Init+0x1a8>)
 8000a28:	f001 fb3e 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2102      	movs	r1, #2
 8000a30:	4829      	ldr	r0, [pc, #164]	@ (8000ad8 <MX_GPIO_Init+0x1ac>)
 8000a32:	f001 fb39 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4824      	ldr	r0, [pc, #144]	@ (8000adc <MX_GPIO_Init+0x1b0>)
 8000a4c:	f001 f97c 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a50:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	4819      	ldr	r0, [pc, #100]	@ (8000ad0 <MX_GPIO_Init+0x1a4>)
 8000a6a:	f001 f96d 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000a6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4813      	ldr	r0, [pc, #76]	@ (8000ad4 <MX_GPIO_Init+0x1a8>)
 8000a88:	f001 f95e 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000a8c:	2380      	movs	r3, #128	@ 0x80
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a90:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480f      	ldr	r0, [pc, #60]	@ (8000ae0 <MX_GPIO_Init+0x1b4>)
 8000aa2:	f001 f951 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4806      	ldr	r0, [pc, #24]	@ (8000ad8 <MX_GPIO_Init+0x1ac>)
 8000abe:	f001 f943 	bl	8001d48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3730      	adds	r7, #48	@ 0x30
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	58024400 	.word	0x58024400
 8000ad0:	58020400 	.word	0x58020400
 8000ad4:	58020c00 	.word	0x58020c00
 8000ad8:	58021000 	.word	0x58021000
 8000adc:	58020800 	.word	0x58020800
 8000ae0:	58021800 	.word	0x58021800

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <Error_Handler+0x8>

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <HAL_MspInit+0x30>)
 8000af8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000afc:	4a08      	ldr	r2, [pc, #32]	@ (8000b20 <HAL_MspInit+0x30>)
 8000afe:	f043 0302 	orr.w	r3, r3, #2
 8000b02:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <HAL_MspInit+0x30>)
 8000b08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b0c:	f003 0302 	and.w	r3, r3, #2
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	58024400 	.word	0x58024400

08000b24 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08e      	sub	sp, #56	@ 0x38
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a59      	ldr	r2, [pc, #356]	@ (8000ca8 <HAL_ETH_MspInit+0x184>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	f040 80ab 	bne.w	8000c9e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b48:	4b58      	ldr	r3, [pc, #352]	@ (8000cac <HAL_ETH_MspInit+0x188>)
 8000b4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b4e:	4a57      	ldr	r2, [pc, #348]	@ (8000cac <HAL_ETH_MspInit+0x188>)
 8000b50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b54:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b58:	4b54      	ldr	r3, [pc, #336]	@ (8000cac <HAL_ETH_MspInit+0x188>)
 8000b5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b62:	623b      	str	r3, [r7, #32]
 8000b64:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b66:	4b51      	ldr	r3, [pc, #324]	@ (8000cac <HAL_ETH_MspInit+0x188>)
 8000b68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b6c:	4a4f      	ldr	r2, [pc, #316]	@ (8000cac <HAL_ETH_MspInit+0x188>)
 8000b6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b72:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b76:	4b4d      	ldr	r3, [pc, #308]	@ (8000cac <HAL_ETH_MspInit+0x188>)
 8000b78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b80:	61fb      	str	r3, [r7, #28]
 8000b82:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b84:	4b49      	ldr	r3, [pc, #292]	@ (8000cac <HAL_ETH_MspInit+0x188>)
 8000b86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b8a:	4a48      	ldr	r2, [pc, #288]	@ (8000cac <HAL_ETH_MspInit+0x188>)
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b90:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b94:	4b45      	ldr	r3, [pc, #276]	@ (8000cac <HAL_ETH_MspInit+0x188>)
 8000b96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b9e:	61bb      	str	r3, [r7, #24]
 8000ba0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba2:	4b42      	ldr	r3, [pc, #264]	@ (8000cac <HAL_ETH_MspInit+0x188>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba8:	4a40      	ldr	r2, [pc, #256]	@ (8000cac <HAL_ETH_MspInit+0x188>)
 8000baa:	f043 0304 	orr.w	r3, r3, #4
 8000bae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bb2:	4b3e      	ldr	r3, [pc, #248]	@ (8000cac <HAL_ETH_MspInit+0x188>)
 8000bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb8:	f003 0304 	and.w	r3, r3, #4
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8000cac <HAL_ETH_MspInit+0x188>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc6:	4a39      	ldr	r2, [pc, #228]	@ (8000cac <HAL_ETH_MspInit+0x188>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd0:	4b36      	ldr	r3, [pc, #216]	@ (8000cac <HAL_ETH_MspInit+0x188>)
 8000bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	4b33      	ldr	r3, [pc, #204]	@ (8000cac <HAL_ETH_MspInit+0x188>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be4:	4a31      	ldr	r2, [pc, #196]	@ (8000cac <HAL_ETH_MspInit+0x188>)
 8000be6:	f043 0302 	orr.w	r3, r3, #2
 8000bea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bee:	4b2f      	ldr	r3, [pc, #188]	@ (8000cac <HAL_ETH_MspInit+0x188>)
 8000bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf4:	f003 0302 	and.w	r3, r3, #2
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8000cac <HAL_ETH_MspInit+0x188>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c02:	4a2a      	ldr	r2, [pc, #168]	@ (8000cac <HAL_ETH_MspInit+0x188>)
 8000c04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c0c:	4b27      	ldr	r3, [pc, #156]	@ (8000cac <HAL_ETH_MspInit+0x188>)
 8000c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c1a:	2332      	movs	r3, #50	@ 0x32
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c2a:	230b      	movs	r3, #11
 8000c2c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c32:	4619      	mov	r1, r3
 8000c34:	481e      	ldr	r0, [pc, #120]	@ (8000cb0 <HAL_ETH_MspInit+0x18c>)
 8000c36:	f001 f887 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c3a:	2386      	movs	r3, #134	@ 0x86
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4a:	230b      	movs	r3, #11
 8000c4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c52:	4619      	mov	r1, r3
 8000c54:	4817      	ldr	r0, [pc, #92]	@ (8000cb4 <HAL_ETH_MspInit+0x190>)
 8000c56:	f001 f877 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6c:	230b      	movs	r3, #11
 8000c6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c74:	4619      	mov	r1, r3
 8000c76:	4810      	ldr	r0, [pc, #64]	@ (8000cb8 <HAL_ETH_MspInit+0x194>)
 8000c78:	f001 f866 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c7c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c8e:	230b      	movs	r3, #11
 8000c90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	4808      	ldr	r0, [pc, #32]	@ (8000cbc <HAL_ETH_MspInit+0x198>)
 8000c9a:	f001 f855 	bl	8001d48 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3738      	adds	r7, #56	@ 0x38
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40028000 	.word	0x40028000
 8000cac:	58024400 	.word	0x58024400
 8000cb0:	58020800 	.word	0x58020800
 8000cb4:	58020000 	.word	0x58020000
 8000cb8:	58020400 	.word	0x58020400
 8000cbc:	58021800 	.word	0x58021800

08000cc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b0bc      	sub	sp, #240	@ 0xf0
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd8:	f107 0318 	add.w	r3, r7, #24
 8000cdc:	22c0      	movs	r2, #192	@ 0xc0
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f005 feaa 	bl	8006a3a <memset>
  if(hspi->Instance==SPI1)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a38      	ldr	r2, [pc, #224]	@ (8000dcc <HAL_SPI_MspInit+0x10c>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d168      	bne.n	8000dc2 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000cf0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d00:	f107 0318 	add.w	r3, r7, #24
 8000d04:	4618      	mov	r0, r3
 8000d06:	f002 fb49 	bl	800339c <HAL_RCCEx_PeriphCLKConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000d10:	f7ff fee8 	bl	8000ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d14:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd0 <HAL_SPI_MspInit+0x110>)
 8000d16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d1a:	4a2d      	ldr	r2, [pc, #180]	@ (8000dd0 <HAL_SPI_MspInit+0x110>)
 8000d1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000d24:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd0 <HAL_SPI_MspInit+0x110>)
 8000d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <HAL_SPI_MspInit+0x110>)
 8000d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d38:	4a25      	ldr	r2, [pc, #148]	@ (8000dd0 <HAL_SPI_MspInit+0x110>)
 8000d3a:	f043 0301 	orr.w	r3, r3, #1
 8000d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d42:	4b23      	ldr	r3, [pc, #140]	@ (8000dd0 <HAL_SPI_MspInit+0x110>)
 8000d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d50:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd0 <HAL_SPI_MspInit+0x110>)
 8000d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d56:	4a1e      	ldr	r2, [pc, #120]	@ (8000dd0 <HAL_SPI_MspInit+0x110>)
 8000d58:	f043 0308 	orr.w	r3, r3, #8
 8000d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d60:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd0 <HAL_SPI_MspInit+0x110>)
 8000d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d66:	f003 0308 	and.w	r3, r3, #8
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d6e:	2360      	movs	r3, #96	@ 0x60
 8000d70:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d86:	2305      	movs	r3, #5
 8000d88:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d90:	4619      	mov	r1, r3
 8000d92:	4810      	ldr	r0, [pc, #64]	@ (8000dd4 <HAL_SPI_MspInit+0x114>)
 8000d94:	f000 ffd8 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d98:	2380      	movs	r3, #128	@ 0x80
 8000d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000db0:	2305      	movs	r3, #5
 8000db2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4806      	ldr	r0, [pc, #24]	@ (8000dd8 <HAL_SPI_MspInit+0x118>)
 8000dbe:	f000 ffc3 	bl	8001d48 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000dc2:	bf00      	nop
 8000dc4:	37f0      	adds	r7, #240	@ 0xf0
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40013000 	.word	0x40013000
 8000dd0:	58024400 	.word	0x58024400
 8000dd4:	58020000 	.word	0x58020000
 8000dd8:	58020c00 	.word	0x58020c00

08000ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b0ba      	sub	sp, #232	@ 0xe8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	22c0      	movs	r2, #192	@ 0xc0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f005 fe1c 	bl	8006a3a <memset>
  if(huart->Instance==USART3)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a27      	ldr	r2, [pc, #156]	@ (8000ea4 <HAL_UART_MspInit+0xc8>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d146      	bne.n	8000e9a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e0c:	f04f 0202 	mov.w	r2, #2
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4618      	mov	r0, r3
 8000e24:	f002 faba 	bl	800339c <HAL_RCCEx_PeriphCLKConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e2e:	f7ff fe59 	bl	8000ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e32:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea8 <HAL_UART_MspInit+0xcc>)
 8000e34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e38:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea8 <HAL_UART_MspInit+0xcc>)
 8000e3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e3e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e42:	4b19      	ldr	r3, [pc, #100]	@ (8000ea8 <HAL_UART_MspInit+0xcc>)
 8000e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e50:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <HAL_UART_MspInit+0xcc>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e56:	4a14      	ldr	r2, [pc, #80]	@ (8000ea8 <HAL_UART_MspInit+0xcc>)
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e60:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <HAL_UART_MspInit+0xcc>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e6e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e88:	2307      	movs	r3, #7
 8000e8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e8e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	@ (8000eac <HAL_UART_MspInit+0xd0>)
 8000e96:	f000 ff57 	bl	8001d48 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000e9a:	bf00      	nop
 8000e9c:	37e8      	adds	r7, #232	@ 0xe8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40004800 	.word	0x40004800
 8000ea8:	58024400 	.word	0x58024400
 8000eac:	58020c00 	.word	0x58020c00

08000eb0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b0ba      	sub	sp, #232	@ 0xe8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	22c0      	movs	r2, #192	@ 0xc0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f005 fdb2 	bl	8006a3a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a30      	ldr	r2, [pc, #192]	@ (8000f9c <HAL_PCD_MspInit+0xec>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d159      	bne.n	8000f94 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ee0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000ee4:	f04f 0300 	mov.w	r3, #0
 8000ee8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000eec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000ef0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f002 fa4f 	bl	800339c <HAL_RCCEx_PeriphCLKConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000f04:	f7ff fdee 	bl	8000ae4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f08:	f001 fa52 	bl	80023b0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b24      	ldr	r3, [pc, #144]	@ (8000fa0 <HAL_PCD_MspInit+0xf0>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f12:	4a23      	ldr	r2, [pc, #140]	@ (8000fa0 <HAL_PCD_MspInit+0xf0>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f1c:	4b20      	ldr	r3, [pc, #128]	@ (8000fa0 <HAL_PCD_MspInit+0xf0>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f2a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000f2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f44:	230a      	movs	r3, #10
 8000f46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4814      	ldr	r0, [pc, #80]	@ (8000fa4 <HAL_PCD_MspInit+0xf4>)
 8000f52:	f000 fef9 	bl	8001d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <HAL_PCD_MspInit+0xf4>)
 8000f72:	f000 fee9 	bl	8001d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <HAL_PCD_MspInit+0xf0>)
 8000f78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f7c:	4a08      	ldr	r2, [pc, #32]	@ (8000fa0 <HAL_PCD_MspInit+0xf0>)
 8000f7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f82:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f86:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <HAL_PCD_MspInit+0xf0>)
 8000f88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000f94:	bf00      	nop
 8000f96:	37e8      	adds	r7, #232	@ 0xe8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40080000 	.word	0x40080000
 8000fa0:	58024400 	.word	0x58024400
 8000fa4:	58020000 	.word	0x58020000

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <NMI_Handler+0x4>

08000fb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <MemManage_Handler+0x4>

08000fc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffe:	f000 f927 	bl	8001250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800100c:	4b37      	ldr	r3, [pc, #220]	@ (80010ec <SystemInit+0xe4>)
 800100e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001012:	4a36      	ldr	r2, [pc, #216]	@ (80010ec <SystemInit+0xe4>)
 8001014:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001018:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800101c:	4b34      	ldr	r3, [pc, #208]	@ (80010f0 <SystemInit+0xe8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	2b06      	cmp	r3, #6
 8001026:	d807      	bhi.n	8001038 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001028:	4b31      	ldr	r3, [pc, #196]	@ (80010f0 <SystemInit+0xe8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f023 030f 	bic.w	r3, r3, #15
 8001030:	4a2f      	ldr	r2, [pc, #188]	@ (80010f0 <SystemInit+0xe8>)
 8001032:	f043 0307 	orr.w	r3, r3, #7
 8001036:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001038:	4b2e      	ldr	r3, [pc, #184]	@ (80010f4 <SystemInit+0xec>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a2d      	ldr	r2, [pc, #180]	@ (80010f4 <SystemInit+0xec>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001044:	4b2b      	ldr	r3, [pc, #172]	@ (80010f4 <SystemInit+0xec>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800104a:	4b2a      	ldr	r3, [pc, #168]	@ (80010f4 <SystemInit+0xec>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4929      	ldr	r1, [pc, #164]	@ (80010f4 <SystemInit+0xec>)
 8001050:	4b29      	ldr	r3, [pc, #164]	@ (80010f8 <SystemInit+0xf0>)
 8001052:	4013      	ands	r3, r2
 8001054:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001056:	4b26      	ldr	r3, [pc, #152]	@ (80010f0 <SystemInit+0xe8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0308 	and.w	r3, r3, #8
 800105e:	2b00      	cmp	r3, #0
 8001060:	d007      	beq.n	8001072 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001062:	4b23      	ldr	r3, [pc, #140]	@ (80010f0 <SystemInit+0xe8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f023 030f 	bic.w	r3, r3, #15
 800106a:	4a21      	ldr	r2, [pc, #132]	@ (80010f0 <SystemInit+0xe8>)
 800106c:	f043 0307 	orr.w	r3, r3, #7
 8001070:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001072:	4b20      	ldr	r3, [pc, #128]	@ (80010f4 <SystemInit+0xec>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001078:	4b1e      	ldr	r3, [pc, #120]	@ (80010f4 <SystemInit+0xec>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800107e:	4b1d      	ldr	r3, [pc, #116]	@ (80010f4 <SystemInit+0xec>)
 8001080:	2200      	movs	r2, #0
 8001082:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001084:	4b1b      	ldr	r3, [pc, #108]	@ (80010f4 <SystemInit+0xec>)
 8001086:	4a1d      	ldr	r2, [pc, #116]	@ (80010fc <SystemInit+0xf4>)
 8001088:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800108a:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <SystemInit+0xec>)
 800108c:	4a1c      	ldr	r2, [pc, #112]	@ (8001100 <SystemInit+0xf8>)
 800108e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001090:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <SystemInit+0xec>)
 8001092:	4a1c      	ldr	r2, [pc, #112]	@ (8001104 <SystemInit+0xfc>)
 8001094:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001096:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <SystemInit+0xec>)
 8001098:	2200      	movs	r2, #0
 800109a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800109c:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <SystemInit+0xec>)
 800109e:	4a19      	ldr	r2, [pc, #100]	@ (8001104 <SystemInit+0xfc>)
 80010a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010a2:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <SystemInit+0xec>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010a8:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <SystemInit+0xec>)
 80010aa:	4a16      	ldr	r2, [pc, #88]	@ (8001104 <SystemInit+0xfc>)
 80010ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010ae:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <SystemInit+0xec>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <SystemInit+0xec>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0e      	ldr	r2, [pc, #56]	@ (80010f4 <SystemInit+0xec>)
 80010ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <SystemInit+0xec>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80010c6:	4b10      	ldr	r3, [pc, #64]	@ (8001108 <SystemInit+0x100>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4b10      	ldr	r3, [pc, #64]	@ (800110c <SystemInit+0x104>)
 80010cc:	4013      	ands	r3, r2
 80010ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80010d2:	d202      	bcs.n	80010da <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80010d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <SystemInit+0x108>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010da:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <SystemInit+0x10c>)
 80010dc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80010e0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00
 80010f0:	52002000 	.word	0x52002000
 80010f4:	58024400 	.word	0x58024400
 80010f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80010fc:	02020200 	.word	0x02020200
 8001100:	01ff0000 	.word	0x01ff0000
 8001104:	01010280 	.word	0x01010280
 8001108:	5c001000 	.word	0x5c001000
 800110c:	ffff0000 	.word	0xffff0000
 8001110:	51008108 	.word	0x51008108
 8001114:	52004000 	.word	0x52004000

08001118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001118:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001150 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800111c:	f7ff ff74 	bl	8001008 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001120:	480c      	ldr	r0, [pc, #48]	@ (8001154 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001122:	490d      	ldr	r1, [pc, #52]	@ (8001158 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001124:	4a0d      	ldr	r2, [pc, #52]	@ (800115c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001128:	e002      	b.n	8001130 <LoopCopyDataInit>

0800112a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800112c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112e:	3304      	adds	r3, #4

08001130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001134:	d3f9      	bcc.n	800112a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001136:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001138:	4c0a      	ldr	r4, [pc, #40]	@ (8001164 <LoopFillZerobss+0x22>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800113c:	e001      	b.n	8001142 <LoopFillZerobss>

0800113e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001140:	3204      	adds	r2, #4

08001142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001144:	d3fb      	bcc.n	800113e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001146:	f005 fc81 	bl	8006a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114a:	f7ff fa3d 	bl	80005c8 <main>
  bx  lr
 800114e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001150:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001154:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001158:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800115c:	08006af4 	.word	0x08006af4
  ldr r2, =_sbss
 8001160:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001164:	240007e0 	.word	0x240007e0

08001168 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC3_IRQHandler>
	...

0800116c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001172:	2003      	movs	r0, #3
 8001174:	f000 f982 	bl	800147c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001178:	f001 ff3a 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 800117c:	4602      	mov	r2, r0
 800117e:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <HAL_Init+0x68>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	0a1b      	lsrs	r3, r3, #8
 8001184:	f003 030f 	and.w	r3, r3, #15
 8001188:	4913      	ldr	r1, [pc, #76]	@ (80011d8 <HAL_Init+0x6c>)
 800118a:	5ccb      	ldrb	r3, [r1, r3]
 800118c:	f003 031f 	and.w	r3, r3, #31
 8001190:	fa22 f303 	lsr.w	r3, r2, r3
 8001194:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001196:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <HAL_Init+0x68>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	4a0e      	ldr	r2, [pc, #56]	@ (80011d8 <HAL_Init+0x6c>)
 80011a0:	5cd3      	ldrb	r3, [r2, r3]
 80011a2:	f003 031f 	and.w	r3, r3, #31
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ac:	4a0b      	ldr	r2, [pc, #44]	@ (80011dc <HAL_Init+0x70>)
 80011ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011b0:	4a0b      	ldr	r2, [pc, #44]	@ (80011e0 <HAL_Init+0x74>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b6:	2000      	movs	r0, #0
 80011b8:	f000 f814 	bl	80011e4 <HAL_InitTick>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e002      	b.n	80011cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011c6:	f7ff fc93 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	58024400 	.word	0x58024400
 80011d8:	08006aac 	.word	0x08006aac
 80011dc:	24000004 	.word	0x24000004
 80011e0:	24000000 	.word	0x24000000

080011e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <HAL_InitTick+0x60>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e021      	b.n	800123c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011f8:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <HAL_InitTick+0x64>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <HAL_InitTick+0x60>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4619      	mov	r1, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001206:	fbb3 f3f1 	udiv	r3, r3, r1
 800120a:	fbb2 f3f3 	udiv	r3, r2, r3
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f959 	bl	80014c6 <HAL_SYSTICK_Config>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e00e      	b.n	800123c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b0f      	cmp	r3, #15
 8001222:	d80a      	bhi.n	800123a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001224:	2200      	movs	r2, #0
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f000 f931 	bl	8001492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001230:	4a06      	ldr	r2, [pc, #24]	@ (800124c <HAL_InitTick+0x68>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e000      	b.n	800123c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2400000c 	.word	0x2400000c
 8001248:	24000000 	.word	0x24000000
 800124c:	24000008 	.word	0x24000008

08001250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001254:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <HAL_IncTick+0x20>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <HAL_IncTick+0x24>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	4a04      	ldr	r2, [pc, #16]	@ (8001274 <HAL_IncTick+0x24>)
 8001262:	6013      	str	r3, [r2, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	2400000c 	.word	0x2400000c
 8001274:	240007dc 	.word	0x240007dc

08001278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return uwTick;
 800127c:	4b03      	ldr	r3, [pc, #12]	@ (800128c <HAL_GetTick+0x14>)
 800127e:	681b      	ldr	r3, [r3, #0]
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	240007dc 	.word	0x240007dc

08001290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff ffee 	bl	8001278 <HAL_GetTick>
 800129c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d005      	beq.n	80012b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012aa:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <HAL_Delay+0x44>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012b6:	bf00      	nop
 80012b8:	f7ff ffde 	bl	8001278 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d8f7      	bhi.n	80012b8 <HAL_Delay+0x28>
  {
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2400000c 	.word	0x2400000c

080012d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012dc:	4b03      	ldr	r3, [pc, #12]	@ (80012ec <HAL_GetREVID+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	0c1b      	lsrs	r3, r3, #16
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	5c001000 	.word	0x5c001000

080012f0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001300:	4904      	ldr	r1, [pc, #16]	@ (8001314 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4313      	orrs	r3, r2
 8001306:	604b      	str	r3, [r1, #4]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	58000400 	.word	0x58000400

08001318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001328:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <__NVIC_SetPriorityGrouping+0x40>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001334:	4013      	ands	r3, r2
 8001336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001340:	4b06      	ldr	r3, [pc, #24]	@ (800135c <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	4313      	orrs	r3, r2
 8001344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001346:	4a04      	ldr	r2, [pc, #16]	@ (8001358 <__NVIC_SetPriorityGrouping+0x40>)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	60d3      	str	r3, [r2, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00
 800135c:	05fa0000 	.word	0x05fa0000

08001360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001364:	4b04      	ldr	r3, [pc, #16]	@ (8001378 <__NVIC_GetPriorityGrouping+0x18>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	0a1b      	lsrs	r3, r3, #8
 800136a:	f003 0307 	and.w	r3, r3, #7
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001388:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db0a      	blt.n	80013a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	490c      	ldr	r1, [pc, #48]	@ (80013c8 <__NVIC_SetPriority+0x4c>)
 8001396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	440b      	add	r3, r1
 80013a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a4:	e00a      	b.n	80013bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4908      	ldr	r1, [pc, #32]	@ (80013cc <__NVIC_SetPriority+0x50>)
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3b04      	subs	r3, #4
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	761a      	strb	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	@ 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f1c3 0307 	rsb	r3, r3, #7
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	bf28      	it	cs
 80013ee:	2304      	movcs	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3304      	adds	r3, #4
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d902      	bls.n	8001400 <NVIC_EncodePriority+0x30>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3b03      	subs	r3, #3
 80013fe:	e000      	b.n	8001402 <NVIC_EncodePriority+0x32>
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001418:	f04f 31ff 	mov.w	r1, #4294967295
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43d9      	mvns	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	4313      	orrs	r3, r2
         );
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	@ 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001448:	d301      	bcc.n	800144e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144a:	2301      	movs	r3, #1
 800144c:	e00f      	b.n	800146e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144e:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <SysTick_Config+0x40>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001456:	210f      	movs	r1, #15
 8001458:	f04f 30ff 	mov.w	r0, #4294967295
 800145c:	f7ff ff8e 	bl	800137c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001460:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <SysTick_Config+0x40>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001466:	4b04      	ldr	r3, [pc, #16]	@ (8001478 <SysTick_Config+0x40>)
 8001468:	2207      	movs	r2, #7
 800146a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	e000e010 	.word	0xe000e010

0800147c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff47 	bl	8001318 <__NVIC_SetPriorityGrouping>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014a0:	f7ff ff5e 	bl	8001360 <__NVIC_GetPriorityGrouping>
 80014a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	6978      	ldr	r0, [r7, #20]
 80014ac:	f7ff ff90 	bl	80013d0 <NVIC_EncodePriority>
 80014b0:	4602      	mov	r2, r0
 80014b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff5f 	bl	800137c <__NVIC_SetPriority>
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff ffb2 	bl	8001438 <SysTick_Config>
 80014d4:	4603      	mov	r3, r0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e0e3      	b.n	80016ba <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d106      	bne.n	800150a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2223      	movs	r2, #35	@ 0x23
 8001500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff fb0d 	bl	8000b24 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	4b6e      	ldr	r3, [pc, #440]	@ (80016c4 <HAL_ETH_Init+0x1e4>)
 800150c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001510:	4a6c      	ldr	r2, [pc, #432]	@ (80016c4 <HAL_ETH_Init+0x1e4>)
 8001512:	f043 0302 	orr.w	r3, r3, #2
 8001516:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800151a:	4b6a      	ldr	r3, [pc, #424]	@ (80016c4 <HAL_ETH_Init+0x1e4>)
 800151c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7a1b      	ldrb	r3, [r3, #8]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d103      	bne.n	8001538 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001530:	2000      	movs	r0, #0
 8001532:	f7ff fedd 	bl	80012f0 <HAL_SYSCFG_ETHInterfaceSelect>
 8001536:	e003      	b.n	8001540 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001538:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800153c:	f7ff fed8 	bl	80012f0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001540:	4b61      	ldr	r3, [pc, #388]	@ (80016c8 <HAL_ETH_Init+0x1e8>)
 8001542:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800155a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800155c:	f7ff fe8c 	bl	8001278 <HAL_GetTick>
 8001560:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001562:	e011      	b.n	8001588 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001564:	f7ff fe88 	bl	8001278 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001572:	d909      	bls.n	8001588 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2204      	movs	r2, #4
 8001578:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	22e0      	movs	r2, #224	@ 0xe0
 8001580:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e098      	b.n	80016ba <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1e4      	bne.n	8001564 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f89e 	bl	80016dc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80015a0:	f001 fea0 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4a49      	ldr	r2, [pc, #292]	@ (80016cc <HAL_ETH_Init+0x1ec>)
 80015a8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ac:	0c9a      	lsrs	r2, r3, #18
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	3a01      	subs	r2, #1
 80015b4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 fa81 	bl	8001ac0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80015ca:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015da:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d009      	beq.n	80015fe <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	22e0      	movs	r2, #224	@ 0xe0
 80015f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e05d      	b.n	80016ba <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001606:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800160a:	4b31      	ldr	r3, [pc, #196]	@ (80016d0 <HAL_ETH_Init+0x1f0>)
 800160c:	4013      	ands	r3, r2
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6952      	ldr	r2, [r2, #20]
 8001612:	0051      	lsls	r1, r2, #1
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	430b      	orrs	r3, r1
 800161a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800161e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 fae9 	bl	8001bfa <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 fb2f 	bl	8001c8c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	3305      	adds	r3, #5
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	021a      	lsls	r2, r3, #8
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	3304      	adds	r3, #4
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4619      	mov	r1, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	3303      	adds	r3, #3
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	061a      	lsls	r2, r3, #24
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	3302      	adds	r3, #2
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	041b      	lsls	r3, r3, #16
 8001660:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	3301      	adds	r3, #1
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800166c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800167a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800167c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <HAL_ETH_Init+0x1f4>)
 800168e:	430b      	orrs	r3, r1
 8001690:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <HAL_ETH_Init+0x1f8>)
 80016a2:	430b      	orrs	r3, r1
 80016a4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2210      	movs	r2, #16
 80016b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	58024400 	.word	0x58024400
 80016c8:	58000400 	.word	0x58000400
 80016cc:	431bde83 	.word	0x431bde83
 80016d0:	ffff8001 	.word	0xffff8001
 80016d4:	0c020060 	.word	0x0c020060
 80016d8:	0c20c000 	.word	0x0c20c000

080016dc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80016ec:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80016f6:	f001 fdf5 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 80016fa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001768 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d804      	bhi.n	800170e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	e022      	b.n	8001754 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	4a16      	ldr	r2, [pc, #88]	@ (800176c <HAL_ETH_SetMDIOClockRange+0x90>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d204      	bcs.n	8001720 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	e019      	b.n	8001754 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	4a13      	ldr	r2, [pc, #76]	@ (8001770 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d915      	bls.n	8001754 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4a12      	ldr	r2, [pc, #72]	@ (8001774 <HAL_ETH_SetMDIOClockRange+0x98>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d804      	bhi.n	800173a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	e00c      	b.n	8001754 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	4a0e      	ldr	r2, [pc, #56]	@ (8001778 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d804      	bhi.n	800174c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	e003      	b.n	8001754 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001752:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	02160ebf 	.word	0x02160ebf
 800176c:	03938700 	.word	0x03938700
 8001770:	05f5e0ff 	.word	0x05f5e0ff
 8001774:	08f0d17f 	.word	0x08f0d17f
 8001778:	0ee6b27f 	.word	0x0ee6b27f

0800177c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800178e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	791b      	ldrb	r3, [r3, #4]
 8001794:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001796:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	7b1b      	ldrb	r3, [r3, #12]
 800179c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800179e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	7b5b      	ldrb	r3, [r3, #13]
 80017a4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80017a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	7b9b      	ldrb	r3, [r3, #14]
 80017ac:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80017ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	7bdb      	ldrb	r3, [r3, #15]
 80017b4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80017b6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	7c12      	ldrb	r2, [r2, #16]
 80017bc:	2a00      	cmp	r2, #0
 80017be:	d102      	bne.n	80017c6 <ETH_SetMACConfig+0x4a>
 80017c0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80017c4:	e000      	b.n	80017c8 <ETH_SetMACConfig+0x4c>
 80017c6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80017c8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	7c52      	ldrb	r2, [r2, #17]
 80017ce:	2a00      	cmp	r2, #0
 80017d0:	d102      	bne.n	80017d8 <ETH_SetMACConfig+0x5c>
 80017d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017d6:	e000      	b.n	80017da <ETH_SetMACConfig+0x5e>
 80017d8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80017da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	7c9b      	ldrb	r3, [r3, #18]
 80017e0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80017e2:	431a      	orrs	r2, r3
               macconf->Speed |
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80017e8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80017ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	7f1b      	ldrb	r3, [r3, #28]
 80017f4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80017f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	7f5b      	ldrb	r3, [r3, #29]
 80017fc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80017fe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	7f92      	ldrb	r2, [r2, #30]
 8001804:	2a00      	cmp	r2, #0
 8001806:	d102      	bne.n	800180e <ETH_SetMACConfig+0x92>
 8001808:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800180c:	e000      	b.n	8001810 <ETH_SetMACConfig+0x94>
 800180e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001810:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	7fdb      	ldrb	r3, [r3, #31]
 8001816:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001818:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001820:	2a00      	cmp	r2, #0
 8001822:	d102      	bne.n	800182a <ETH_SetMACConfig+0xae>
 8001824:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001828:	e000      	b.n	800182c <ETH_SetMACConfig+0xb0>
 800182a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800182c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001832:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800183a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800183c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001842:	4313      	orrs	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b56      	ldr	r3, [pc, #344]	@ (80019a8 <ETH_SetMACConfig+0x22c>)
 800184e:	4013      	ands	r3, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	68f9      	ldr	r1, [r7, #12]
 8001856:	430b      	orrs	r3, r1
 8001858:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800185e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001866:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001868:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001870:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001872:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800187a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800187c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001884:	2a00      	cmp	r2, #0
 8001886:	d102      	bne.n	800188e <ETH_SetMACConfig+0x112>
 8001888:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800188c:	e000      	b.n	8001890 <ETH_SetMACConfig+0x114>
 800188e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001890:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001896:	4313      	orrs	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	4b42      	ldr	r3, [pc, #264]	@ (80019ac <ETH_SetMACConfig+0x230>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	68f9      	ldr	r1, [r7, #12]
 80018aa:	430b      	orrs	r3, r1
 80018ac:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018b4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80018ba:	4313      	orrs	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	4b3a      	ldr	r3, [pc, #232]	@ (80019b0 <ETH_SetMACConfig+0x234>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	68f9      	ldr	r1, [r7, #12]
 80018ce:	430b      	orrs	r3, r1
 80018d0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80018d8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018de:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80018e6:	2a00      	cmp	r2, #0
 80018e8:	d101      	bne.n	80018ee <ETH_SetMACConfig+0x172>
 80018ea:	2280      	movs	r2, #128	@ 0x80
 80018ec:	e000      	b.n	80018f0 <ETH_SetMACConfig+0x174>
 80018ee:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80018f0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018f6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80018f8:	4313      	orrs	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001902:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001906:	4013      	ands	r3, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	68f9      	ldr	r1, [r7, #12]
 800190e:	430b      	orrs	r3, r1
 8001910:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001918:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001920:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001922:	4313      	orrs	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800192e:	f023 0103 	bic.w	r1, r3, #3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	430a      	orrs	r2, r1
 800193a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001946:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001962:	2a00      	cmp	r2, #0
 8001964:	d101      	bne.n	800196a <ETH_SetMACConfig+0x1ee>
 8001966:	2240      	movs	r2, #64	@ 0x40
 8001968:	e000      	b.n	800196c <ETH_SetMACConfig+0x1f0>
 800196a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800196c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001974:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001976:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800197e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001980:	4313      	orrs	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800198c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	430a      	orrs	r2, r1
 8001998:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	00048083 	.word	0x00048083
 80019ac:	c0f88000 	.word	0xc0f88000
 80019b0:	fffffef0 	.word	0xfffffef0

080019b4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b38      	ldr	r3, [pc, #224]	@ (8001aac <ETH_SetDMAConfig+0xf8>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	6811      	ldr	r1, [r2, #0]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	430b      	orrs	r3, r1
 80019d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019da:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	791b      	ldrb	r3, [r3, #4]
 80019e0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019e6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	7b1b      	ldrb	r3, [r3, #12]
 80019ec:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab0 <ETH_SetDMAConfig+0xfc>)
 80019fe:	4013      	ands	r3, r2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	68f9      	ldr	r1, [r7, #12]
 8001a06:	430b      	orrs	r3, r1
 8001a08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a0c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	7b5b      	ldrb	r3, [r3, #13]
 8001a12:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a24:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001a28:	4b22      	ldr	r3, [pc, #136]	@ (8001ab4 <ETH_SetDMAConfig+0x100>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	68f9      	ldr	r1, [r7, #12]
 8001a32:	430b      	orrs	r3, r1
 8001a34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a38:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	7d1b      	ldrb	r3, [r3, #20]
 8001a44:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a46:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	7f5b      	ldrb	r3, [r3, #29]
 8001a4c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a5a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001a5e:	4b16      	ldr	r3, [pc, #88]	@ (8001ab8 <ETH_SetDMAConfig+0x104>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6812      	ldr	r2, [r2, #0]
 8001a66:	68f9      	ldr	r1, [r7, #12]
 8001a68:	430b      	orrs	r3, r1
 8001a6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a6e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	7f1b      	ldrb	r3, [r3, #28]
 8001a76:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a88:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <ETH_SetDMAConfig+0x108>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	68f9      	ldr	r1, [r7, #12]
 8001a96:	430b      	orrs	r3, r1
 8001a98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a9c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	ffff87fd 	.word	0xffff87fd
 8001ab0:	ffff2ffe 	.word	0xffff2ffe
 8001ab4:	fffec000 	.word	0xfffec000
 8001ab8:	ffc0efef 	.word	0xffc0efef
 8001abc:	7fc0ffff 	.word	0x7fc0ffff

08001ac0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b0a4      	sub	sp, #144	@ 0x90
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001aea:	2301      	movs	r3, #1
 8001aec:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001af6:	2301      	movs	r3, #1
 8001af8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001afc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b00:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001b18:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001b1c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001b24:	2300      	movs	r3, #0
 8001b26:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001b42:	2300      	movs	r3, #0
 8001b44:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001b52:	2301      	movs	r3, #1
 8001b54:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001b58:	2320      	movs	r3, #32
 8001b5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001b6a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001b70:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b74:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001b94:	2301      	movs	r3, #1
 8001b96:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ba4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ba8:	4619      	mov	r1, r3
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fde6 	bl	800177c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001bca:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001bce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001bd4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001bd8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001be0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001be4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001be6:	f107 0308 	add.w	r3, r7, #8
 8001bea:	4619      	mov	r1, r3
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff fee1 	bl	80019b4 <ETH_SetDMAConfig>
}
 8001bf2:	bf00      	nop
 8001bf4:	3790      	adds	r7, #144	@ 0x90
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b085      	sub	sp, #20
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	e01d      	b.n	8001c44 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68d9      	ldr	r1, [r3, #12]
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	440b      	add	r3, r1
 8001c18:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	2200      	movs	r2, #0
 8001c24:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001c32:	68b9      	ldr	r1, [r7, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	3206      	adds	r2, #6
 8001c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	3301      	adds	r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d9de      	bls.n	8001c08 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c58:	461a      	mov	r2, r3
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c6c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c7c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	e023      	b.n	8001ce2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6919      	ldr	r1, [r3, #16]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	440b      	add	r3, r1
 8001caa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	3212      	adds	r2, #18
 8001cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d9d8      	bls.n	8001c9a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d0e:	461a      	mov	r2, r3
 8001d10:	2303      	movs	r3, #3
 8001d12:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d22:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d36:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	@ 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d56:	4b89      	ldr	r3, [pc, #548]	@ (8001f7c <HAL_GPIO_Init+0x234>)
 8001d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d5a:	e194      	b.n	8002086 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2101      	movs	r1, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8186 	beq.w	8002080 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d005      	beq.n	8001d8c <HAL_GPIO_Init+0x44>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d130      	bne.n	8001dee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	f003 0201 	and.w	r2, r3, #1
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d017      	beq.n	8001e2a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	2203      	movs	r2, #3
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d123      	bne.n	8001e7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	08da      	lsrs	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3208      	adds	r2, #8
 8001e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	08da      	lsrs	r2, r3, #3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3208      	adds	r2, #8
 8001e78:	69b9      	ldr	r1, [r7, #24]
 8001e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	2203      	movs	r2, #3
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0203 	and.w	r2, r3, #3
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 80e0 	beq.w	8002080 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec0:	4b2f      	ldr	r3, [pc, #188]	@ (8001f80 <HAL_GPIO_Init+0x238>)
 8001ec2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ec6:	4a2e      	ldr	r2, [pc, #184]	@ (8001f80 <HAL_GPIO_Init+0x238>)
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f80 <HAL_GPIO_Init+0x238>)
 8001ed2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ede:	4a29      	ldr	r2, [pc, #164]	@ (8001f84 <HAL_GPIO_Init+0x23c>)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	220f      	movs	r2, #15
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a20      	ldr	r2, [pc, #128]	@ (8001f88 <HAL_GPIO_Init+0x240>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d052      	beq.n	8001fb0 <HAL_GPIO_Init+0x268>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f8c <HAL_GPIO_Init+0x244>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d031      	beq.n	8001f76 <HAL_GPIO_Init+0x22e>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a1e      	ldr	r2, [pc, #120]	@ (8001f90 <HAL_GPIO_Init+0x248>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d02b      	beq.n	8001f72 <HAL_GPIO_Init+0x22a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001f94 <HAL_GPIO_Init+0x24c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d025      	beq.n	8001f6e <HAL_GPIO_Init+0x226>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a1c      	ldr	r2, [pc, #112]	@ (8001f98 <HAL_GPIO_Init+0x250>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d01f      	beq.n	8001f6a <HAL_GPIO_Init+0x222>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001f9c <HAL_GPIO_Init+0x254>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d019      	beq.n	8001f66 <HAL_GPIO_Init+0x21e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a1a      	ldr	r2, [pc, #104]	@ (8001fa0 <HAL_GPIO_Init+0x258>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x21a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a19      	ldr	r2, [pc, #100]	@ (8001fa4 <HAL_GPIO_Init+0x25c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00d      	beq.n	8001f5e <HAL_GPIO_Init+0x216>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a18      	ldr	r2, [pc, #96]	@ (8001fa8 <HAL_GPIO_Init+0x260>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <HAL_GPIO_Init+0x212>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a17      	ldr	r2, [pc, #92]	@ (8001fac <HAL_GPIO_Init+0x264>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_GPIO_Init+0x20e>
 8001f52:	2309      	movs	r3, #9
 8001f54:	e02d      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f56:	230a      	movs	r3, #10
 8001f58:	e02b      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f5a:	2308      	movs	r3, #8
 8001f5c:	e029      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f5e:	2307      	movs	r3, #7
 8001f60:	e027      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f62:	2306      	movs	r3, #6
 8001f64:	e025      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f66:	2305      	movs	r3, #5
 8001f68:	e023      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	e021      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e01f      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e01d      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e01b      	b.n	8001fb2 <HAL_GPIO_Init+0x26a>
 8001f7a:	bf00      	nop
 8001f7c:	58000080 	.word	0x58000080
 8001f80:	58024400 	.word	0x58024400
 8001f84:	58000400 	.word	0x58000400
 8001f88:	58020000 	.word	0x58020000
 8001f8c:	58020400 	.word	0x58020400
 8001f90:	58020800 	.word	0x58020800
 8001f94:	58020c00 	.word	0x58020c00
 8001f98:	58021000 	.word	0x58021000
 8001f9c:	58021400 	.word	0x58021400
 8001fa0:	58021800 	.word	0x58021800
 8001fa4:	58021c00 	.word	0x58021c00
 8001fa8:	58022000 	.word	0x58022000
 8001fac:	58022400 	.word	0x58022400
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	f002 0203 	and.w	r2, r2, #3
 8001fb8:	0092      	lsls	r2, r2, #2
 8001fba:	4093      	lsls	r3, r2
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fc2:	4938      	ldr	r1, [pc, #224]	@ (80020a4 <HAL_GPIO_Init+0x35c>)
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	3302      	adds	r3, #2
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ff6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ffe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002024:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	3301      	adds	r3, #1
 8002084:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	f47f ae63 	bne.w	8001d5c <HAL_GPIO_Init+0x14>
  }
}
 8002096:	bf00      	nop
 8002098:	bf00      	nop
 800209a:	3724      	adds	r7, #36	@ 0x24
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	58000400 	.word	0x58000400

080020a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	807b      	strh	r3, [r7, #2]
 80020b4:	4613      	mov	r3, r2
 80020b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020b8:	787b      	ldrb	r3, [r7, #1]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020be:	887a      	ldrh	r2, [r7, #2]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020c4:	e003      	b.n	80020ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020c6:	887b      	ldrh	r3, [r7, #2]
 80020c8:	041a      	lsls	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	619a      	str	r2, [r3, #24]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af02      	add	r7, sp, #8
 80020e0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0fe      	b.n	80022ea <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d106      	bne.n	8002106 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7fe fed5 	bl	8000eb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2203      	movs	r2, #3
 800210a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f004 f9fc 	bl	8006510 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	7c1a      	ldrb	r2, [r3, #16]
 8002120:	f88d 2000 	strb.w	r2, [sp]
 8002124:	3304      	adds	r3, #4
 8002126:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002128:	f004 f980 	bl	800642c <USB_CoreInit>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2202      	movs	r2, #2
 8002136:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e0d5      	b.n	80022ea <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f004 f9f4 	bl	8006532 <USB_SetCurrentMode>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0c6      	b.n	80022ea <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800215c:	2300      	movs	r3, #0
 800215e:	73fb      	strb	r3, [r7, #15]
 8002160:	e04a      	b.n	80021f8 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	3315      	adds	r3, #21
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	3314      	adds	r3, #20
 8002186:	7bfa      	ldrb	r2, [r7, #15]
 8002188:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	b298      	uxth	r0, r3
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	332e      	adds	r3, #46	@ 0x2e
 800219e:	4602      	mov	r2, r0
 80021a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	3318      	adds	r3, #24
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	331c      	adds	r3, #28
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021ca:	7bfa      	ldrb	r2, [r7, #15]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	3320      	adds	r3, #32
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	3324      	adds	r3, #36	@ 0x24
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
 80021f4:	3301      	adds	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	791b      	ldrb	r3, [r3, #4]
 80021fc:	7bfa      	ldrb	r2, [r7, #15]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d3af      	bcc.n	8002162 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002202:	2300      	movs	r3, #0
 8002204:	73fb      	strb	r3, [r7, #15]
 8002206:	e044      	b.n	8002292 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002208:	7bfa      	ldrb	r2, [r7, #15]
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800221e:	7bfa      	ldrb	r2, [r7, #15]
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002230:	7bfa      	ldrb	r2, [r7, #15]
 8002232:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002234:	7bfa      	ldrb	r2, [r7, #15]
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800224a:	7bfa      	ldrb	r2, [r7, #15]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4413      	add	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002260:	7bfa      	ldrb	r2, [r7, #15]
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002276:	7bfa      	ldrb	r2, [r7, #15]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	3301      	adds	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	791b      	ldrb	r3, [r3, #4]
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	429a      	cmp	r2, r3
 800229a:	d3b5      	bcc.n	8002208 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7c1a      	ldrb	r2, [r3, #16]
 80022a4:	f88d 2000 	strb.w	r2, [sp]
 80022a8:	3304      	adds	r3, #4
 80022aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ac:	f004 f98e 	bl	80065cc <USB_DevInit>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d005      	beq.n	80022c2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2202      	movs	r2, #2
 80022ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e013      	b.n	80022ea <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	7b1b      	ldrb	r3, [r3, #12]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d102      	bne.n	80022de <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f80b 	bl	80022f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f004 fb49 	bl	800697a <USB_DevDisconnect>

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002322:	4b05      	ldr	r3, [pc, #20]	@ (8002338 <HAL_PCDEx_ActivateLPM+0x44>)
 8002324:	4313      	orrs	r3, r2
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	10000003 	.word	0x10000003

0800233c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002344:	4b19      	ldr	r3, [pc, #100]	@ (80023ac <HAL_PWREx_ConfigSupply+0x70>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b04      	cmp	r3, #4
 800234e:	d00a      	beq.n	8002366 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002350:	4b16      	ldr	r3, [pc, #88]	@ (80023ac <HAL_PWREx_ConfigSupply+0x70>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	429a      	cmp	r2, r3
 800235c:	d001      	beq.n	8002362 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e01f      	b.n	80023a2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	e01d      	b.n	80023a2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002366:	4b11      	ldr	r3, [pc, #68]	@ (80023ac <HAL_PWREx_ConfigSupply+0x70>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f023 0207 	bic.w	r2, r3, #7
 800236e:	490f      	ldr	r1, [pc, #60]	@ (80023ac <HAL_PWREx_ConfigSupply+0x70>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4313      	orrs	r3, r2
 8002374:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002376:	f7fe ff7f 	bl	8001278 <HAL_GetTick>
 800237a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800237c:	e009      	b.n	8002392 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800237e:	f7fe ff7b 	bl	8001278 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800238c:	d901      	bls.n	8002392 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e007      	b.n	80023a2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002392:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <HAL_PWREx_ConfigSupply+0x70>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800239a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800239e:	d1ee      	bne.n	800237e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	58024800 	.word	0x58024800

080023b0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80023b4:	4b05      	ldr	r3, [pc, #20]	@ (80023cc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	4a04      	ldr	r2, [pc, #16]	@ (80023cc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80023ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023be:	60d3      	str	r3, [r2, #12]
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	58024800 	.word	0x58024800

080023d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08c      	sub	sp, #48	@ 0x30
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d102      	bne.n	80023e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	f000 bc48 	b.w	8002c74 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 8088 	beq.w	8002502 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023f2:	4b99      	ldr	r3, [pc, #612]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023fc:	4b96      	ldr	r3, [pc, #600]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 80023fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002400:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002404:	2b10      	cmp	r3, #16
 8002406:	d007      	beq.n	8002418 <HAL_RCC_OscConfig+0x48>
 8002408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800240a:	2b18      	cmp	r3, #24
 800240c:	d111      	bne.n	8002432 <HAL_RCC_OscConfig+0x62>
 800240e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d10c      	bne.n	8002432 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002418:	4b8f      	ldr	r3, [pc, #572]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d06d      	beq.n	8002500 <HAL_RCC_OscConfig+0x130>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d169      	bne.n	8002500 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	f000 bc21 	b.w	8002c74 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800243a:	d106      	bne.n	800244a <HAL_RCC_OscConfig+0x7a>
 800243c:	4b86      	ldr	r3, [pc, #536]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a85      	ldr	r2, [pc, #532]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 8002442:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	e02e      	b.n	80024a8 <HAL_RCC_OscConfig+0xd8>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0x9c>
 8002452:	4b81      	ldr	r3, [pc, #516]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a80      	ldr	r2, [pc, #512]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 8002458:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	4b7e      	ldr	r3, [pc, #504]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a7d      	ldr	r2, [pc, #500]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 8002464:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e01d      	b.n	80024a8 <HAL_RCC_OscConfig+0xd8>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0xc0>
 8002476:	4b78      	ldr	r3, [pc, #480]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a77      	ldr	r2, [pc, #476]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 800247c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b75      	ldr	r3, [pc, #468]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a74      	ldr	r2, [pc, #464]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e00b      	b.n	80024a8 <HAL_RCC_OscConfig+0xd8>
 8002490:	4b71      	ldr	r3, [pc, #452]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a70      	ldr	r2, [pc, #448]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 8002496:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b6e      	ldr	r3, [pc, #440]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a6d      	ldr	r2, [pc, #436]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 80024a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d013      	beq.n	80024d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7fe fee2 	bl	8001278 <HAL_GetTick>
 80024b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b8:	f7fe fede 	bl	8001278 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	@ 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e3d4      	b.n	8002c74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024ca:	4b63      	ldr	r3, [pc, #396]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0xe8>
 80024d6:	e014      	b.n	8002502 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7fe fece 	bl	8001278 <HAL_GetTick>
 80024dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e0:	f7fe feca 	bl	8001278 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	@ 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e3c0      	b.n	8002c74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024f2:	4b59      	ldr	r3, [pc, #356]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x110>
 80024fe:	e000      	b.n	8002502 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 80ca 	beq.w	80026a4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002510:	4b51      	ldr	r3, [pc, #324]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002518:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800251a:	4b4f      	ldr	r3, [pc, #316]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 800251c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800251e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <HAL_RCC_OscConfig+0x166>
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	2b18      	cmp	r3, #24
 800252a:	d156      	bne.n	80025da <HAL_RCC_OscConfig+0x20a>
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d151      	bne.n	80025da <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002536:	4b48      	ldr	r3, [pc, #288]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b00      	cmp	r3, #0
 8002540:	d005      	beq.n	800254e <HAL_RCC_OscConfig+0x17e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e392      	b.n	8002c74 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800254e:	4b42      	ldr	r3, [pc, #264]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 0219 	bic.w	r2, r3, #25
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	493f      	ldr	r1, [pc, #252]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 800255c:	4313      	orrs	r3, r2
 800255e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7fe fe8a 	bl	8001278 <HAL_GetTick>
 8002564:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002568:	f7fe fe86 	bl	8001278 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e37c      	b.n	8002c74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800257a:	4b37      	ldr	r3, [pc, #220]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	f7fe fea7 	bl	80012d8 <HAL_GetREVID>
 800258a:	4603      	mov	r3, r0
 800258c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002590:	4293      	cmp	r3, r2
 8002592:	d817      	bhi.n	80025c4 <HAL_RCC_OscConfig+0x1f4>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	2b40      	cmp	r3, #64	@ 0x40
 800259a:	d108      	bne.n	80025ae <HAL_RCC_OscConfig+0x1de>
 800259c:	4b2e      	ldr	r3, [pc, #184]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80025a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 80025a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025aa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025ac:	e07a      	b.n	80026a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	031b      	lsls	r3, r3, #12
 80025bc:	4926      	ldr	r1, [pc, #152]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025c2:	e06f      	b.n	80026a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c4:	4b24      	ldr	r3, [pc, #144]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	061b      	lsls	r3, r3, #24
 80025d2:	4921      	ldr	r1, [pc, #132]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d8:	e064      	b.n	80026a4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d047      	beq.n	8002672 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 0219 	bic.w	r2, r3, #25
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	491a      	ldr	r1, [pc, #104]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7fe fe40 	bl	8001278 <HAL_GetTick>
 80025f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025fc:	f7fe fe3c 	bl	8001278 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e332      	b.n	8002c74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800260e:	4b12      	ldr	r3, [pc, #72]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261a:	f7fe fe5d 	bl	80012d8 <HAL_GetREVID>
 800261e:	4603      	mov	r3, r0
 8002620:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002624:	4293      	cmp	r3, r2
 8002626:	d819      	bhi.n	800265c <HAL_RCC_OscConfig+0x28c>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b40      	cmp	r3, #64	@ 0x40
 800262e:	d108      	bne.n	8002642 <HAL_RCC_OscConfig+0x272>
 8002630:	4b09      	ldr	r3, [pc, #36]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002638:	4a07      	ldr	r2, [pc, #28]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 800263a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800263e:	6053      	str	r3, [r2, #4]
 8002640:	e030      	b.n	80026a4 <HAL_RCC_OscConfig+0x2d4>
 8002642:	4b05      	ldr	r3, [pc, #20]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	031b      	lsls	r3, r3, #12
 8002650:	4901      	ldr	r1, [pc, #4]	@ (8002658 <HAL_RCC_OscConfig+0x288>)
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]
 8002656:	e025      	b.n	80026a4 <HAL_RCC_OscConfig+0x2d4>
 8002658:	58024400 	.word	0x58024400
 800265c:	4b9a      	ldr	r3, [pc, #616]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	061b      	lsls	r3, r3, #24
 800266a:	4997      	ldr	r1, [pc, #604]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]
 8002670:	e018      	b.n	80026a4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002672:	4b95      	ldr	r3, [pc, #596]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a94      	ldr	r2, [pc, #592]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 8002678:	f023 0301 	bic.w	r3, r3, #1
 800267c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267e:	f7fe fdfb 	bl	8001278 <HAL_GetTick>
 8002682:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002686:	f7fe fdf7 	bl	8001278 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e2ed      	b.n	8002c74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002698:	4b8b      	ldr	r3, [pc, #556]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f0      	bne.n	8002686 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80a9 	beq.w	8002804 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026b2:	4b85      	ldr	r3, [pc, #532]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026bc:	4b82      	ldr	r3, [pc, #520]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 80026be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d007      	beq.n	80026d8 <HAL_RCC_OscConfig+0x308>
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2b18      	cmp	r3, #24
 80026cc:	d13a      	bne.n	8002744 <HAL_RCC_OscConfig+0x374>
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d135      	bne.n	8002744 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026d8:	4b7b      	ldr	r3, [pc, #492]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_OscConfig+0x320>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	2b80      	cmp	r3, #128	@ 0x80
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e2c1      	b.n	8002c74 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026f0:	f7fe fdf2 	bl	80012d8 <HAL_GetREVID>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d817      	bhi.n	800272e <HAL_RCC_OscConfig+0x35e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	2b20      	cmp	r3, #32
 8002704:	d108      	bne.n	8002718 <HAL_RCC_OscConfig+0x348>
 8002706:	4b70      	ldr	r3, [pc, #448]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800270e:	4a6e      	ldr	r2, [pc, #440]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 8002710:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002714:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002716:	e075      	b.n	8002804 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002718:	4b6b      	ldr	r3, [pc, #428]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	069b      	lsls	r3, r3, #26
 8002726:	4968      	ldr	r1, [pc, #416]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 8002728:	4313      	orrs	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800272c:	e06a      	b.n	8002804 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800272e:	4b66      	ldr	r3, [pc, #408]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	061b      	lsls	r3, r3, #24
 800273c:	4962      	ldr	r1, [pc, #392]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 800273e:	4313      	orrs	r3, r2
 8002740:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002742:	e05f      	b.n	8002804 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d042      	beq.n	80027d2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800274c:	4b5e      	ldr	r3, [pc, #376]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a5d      	ldr	r2, [pc, #372]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 8002752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002758:	f7fe fd8e 	bl	8001278 <HAL_GetTick>
 800275c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002760:	f7fe fd8a 	bl	8001278 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e280      	b.n	8002c74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002772:	4b55      	ldr	r3, [pc, #340]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800277e:	f7fe fdab 	bl	80012d8 <HAL_GetREVID>
 8002782:	4603      	mov	r3, r0
 8002784:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002788:	4293      	cmp	r3, r2
 800278a:	d817      	bhi.n	80027bc <HAL_RCC_OscConfig+0x3ec>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	2b20      	cmp	r3, #32
 8002792:	d108      	bne.n	80027a6 <HAL_RCC_OscConfig+0x3d6>
 8002794:	4b4c      	ldr	r3, [pc, #304]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800279c:	4a4a      	ldr	r2, [pc, #296]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 800279e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80027a2:	6053      	str	r3, [r2, #4]
 80027a4:	e02e      	b.n	8002804 <HAL_RCC_OscConfig+0x434>
 80027a6:	4b48      	ldr	r3, [pc, #288]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	069b      	lsls	r3, r3, #26
 80027b4:	4944      	ldr	r1, [pc, #272]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	604b      	str	r3, [r1, #4]
 80027ba:	e023      	b.n	8002804 <HAL_RCC_OscConfig+0x434>
 80027bc:	4b42      	ldr	r3, [pc, #264]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	061b      	lsls	r3, r3, #24
 80027ca:	493f      	ldr	r1, [pc, #252]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	60cb      	str	r3, [r1, #12]
 80027d0:	e018      	b.n	8002804 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027d2:	4b3d      	ldr	r3, [pc, #244]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a3c      	ldr	r2, [pc, #240]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 80027d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027de:	f7fe fd4b 	bl	8001278 <HAL_GetTick>
 80027e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027e6:	f7fe fd47 	bl	8001278 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e23d      	b.n	8002c74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027f8:	4b33      	ldr	r3, [pc, #204]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1f0      	bne.n	80027e6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d036      	beq.n	800287e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d019      	beq.n	800284c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002818:	4b2b      	ldr	r3, [pc, #172]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 800281a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800281c:	4a2a      	ldr	r2, [pc, #168]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002824:	f7fe fd28 	bl	8001278 <HAL_GetTick>
 8002828:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800282c:	f7fe fd24 	bl	8001278 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e21a      	b.n	8002c74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800283e:	4b22      	ldr	r3, [pc, #136]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 8002840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0x45c>
 800284a:	e018      	b.n	800287e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800284c:	4b1e      	ldr	r3, [pc, #120]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 800284e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002850:	4a1d      	ldr	r2, [pc, #116]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 8002852:	f023 0301 	bic.w	r3, r3, #1
 8002856:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002858:	f7fe fd0e 	bl	8001278 <HAL_GetTick>
 800285c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002860:	f7fe fd0a 	bl	8001278 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e200      	b.n	8002c74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002872:	4b15      	ldr	r3, [pc, #84]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 8002874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	2b00      	cmp	r3, #0
 8002888:	d039      	beq.n	80028fe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d01c      	beq.n	80028cc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002892:	4b0d      	ldr	r3, [pc, #52]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a0c      	ldr	r2, [pc, #48]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 8002898:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800289c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800289e:	f7fe fceb 	bl	8001278 <HAL_GetTick>
 80028a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028a6:	f7fe fce7 	bl	8001278 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e1dd      	b.n	8002c74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028b8:	4b03      	ldr	r3, [pc, #12]	@ (80028c8 <HAL_RCC_OscConfig+0x4f8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x4d6>
 80028c4:	e01b      	b.n	80028fe <HAL_RCC_OscConfig+0x52e>
 80028c6:	bf00      	nop
 80028c8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028cc:	4b9b      	ldr	r3, [pc, #620]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a9a      	ldr	r2, [pc, #616]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 80028d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028d8:	f7fe fcce 	bl	8001278 <HAL_GetTick>
 80028dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028e0:	f7fe fcca 	bl	8001278 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e1c0      	b.n	8002c74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028f2:	4b92      	ldr	r3, [pc, #584]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 8081 	beq.w	8002a0e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800290c:	4b8c      	ldr	r3, [pc, #560]	@ (8002b40 <HAL_RCC_OscConfig+0x770>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a8b      	ldr	r2, [pc, #556]	@ (8002b40 <HAL_RCC_OscConfig+0x770>)
 8002912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002916:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002918:	f7fe fcae 	bl	8001278 <HAL_GetTick>
 800291c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002920:	f7fe fcaa 	bl	8001278 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	@ 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e1a0      	b.n	8002c74 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002932:	4b83      	ldr	r3, [pc, #524]	@ (8002b40 <HAL_RCC_OscConfig+0x770>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d106      	bne.n	8002954 <HAL_RCC_OscConfig+0x584>
 8002946:	4b7d      	ldr	r3, [pc, #500]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294a:	4a7c      	ldr	r2, [pc, #496]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	6713      	str	r3, [r2, #112]	@ 0x70
 8002952:	e02d      	b.n	80029b0 <HAL_RCC_OscConfig+0x5e0>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10c      	bne.n	8002976 <HAL_RCC_OscConfig+0x5a6>
 800295c:	4b77      	ldr	r3, [pc, #476]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002960:	4a76      	ldr	r2, [pc, #472]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	6713      	str	r3, [r2, #112]	@ 0x70
 8002968:	4b74      	ldr	r3, [pc, #464]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296c:	4a73      	ldr	r2, [pc, #460]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 800296e:	f023 0304 	bic.w	r3, r3, #4
 8002972:	6713      	str	r3, [r2, #112]	@ 0x70
 8002974:	e01c      	b.n	80029b0 <HAL_RCC_OscConfig+0x5e0>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b05      	cmp	r3, #5
 800297c:	d10c      	bne.n	8002998 <HAL_RCC_OscConfig+0x5c8>
 800297e:	4b6f      	ldr	r3, [pc, #444]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002982:	4a6e      	ldr	r2, [pc, #440]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002984:	f043 0304 	orr.w	r3, r3, #4
 8002988:	6713      	str	r3, [r2, #112]	@ 0x70
 800298a:	4b6c      	ldr	r3, [pc, #432]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 800298c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800298e:	4a6b      	ldr	r2, [pc, #428]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6713      	str	r3, [r2, #112]	@ 0x70
 8002996:	e00b      	b.n	80029b0 <HAL_RCC_OscConfig+0x5e0>
 8002998:	4b68      	ldr	r3, [pc, #416]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299c:	4a67      	ldr	r2, [pc, #412]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a4:	4b65      	ldr	r3, [pc, #404]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a8:	4a64      	ldr	r2, [pc, #400]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 80029aa:	f023 0304 	bic.w	r3, r3, #4
 80029ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d015      	beq.n	80029e4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b8:	f7fe fc5e 	bl	8001278 <HAL_GetTick>
 80029bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c0:	f7fe fc5a 	bl	8001278 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e14e      	b.n	8002c74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029d6:	4b59      	ldr	r3, [pc, #356]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ee      	beq.n	80029c0 <HAL_RCC_OscConfig+0x5f0>
 80029e2:	e014      	b.n	8002a0e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7fe fc48 	bl	8001278 <HAL_GetTick>
 80029e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029ea:	e00a      	b.n	8002a02 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ec:	f7fe fc44 	bl	8001278 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e138      	b.n	8002c74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a02:	4b4e      	ldr	r3, [pc, #312]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1ee      	bne.n	80029ec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 812d 	beq.w	8002c72 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a18:	4b48      	ldr	r3, [pc, #288]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a20:	2b18      	cmp	r3, #24
 8002a22:	f000 80bd 	beq.w	8002ba0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	f040 809e 	bne.w	8002b6c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a30:	4b42      	ldr	r3, [pc, #264]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a41      	ldr	r2, [pc, #260]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002a36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fc1c 	bl	8001278 <HAL_GetTick>
 8002a40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a44:	f7fe fc18 	bl	8001278 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e10e      	b.n	8002c74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a56:	4b39      	ldr	r3, [pc, #228]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a62:	4b36      	ldr	r3, [pc, #216]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002a64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a66:	4b37      	ldr	r3, [pc, #220]	@ (8002b44 <HAL_RCC_OscConfig+0x774>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a72:	0112      	lsls	r2, r2, #4
 8002a74:	430a      	orrs	r2, r1
 8002a76:	4931      	ldr	r1, [pc, #196]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a80:	3b01      	subs	r3, #1
 8002a82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	025b      	lsls	r3, r3, #9
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a96:	3b01      	subs	r3, #1
 8002a98:	041b      	lsls	r3, r3, #16
 8002a9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	061b      	lsls	r3, r3, #24
 8002aa8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002aac:	4923      	ldr	r1, [pc, #140]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002ab2:	4b22      	ldr	r3, [pc, #136]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab6:	4a21      	ldr	r2, [pc, #132]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002abe:	4b1f      	ldr	r3, [pc, #124]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002ac0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ac2:	4b21      	ldr	r3, [pc, #132]	@ (8002b48 <HAL_RCC_OscConfig+0x778>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002aca:	00d2      	lsls	r2, r2, #3
 8002acc:	491b      	ldr	r1, [pc, #108]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad6:	f023 020c 	bic.w	r2, r3, #12
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	4917      	ldr	r1, [pc, #92]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ae4:	4b15      	ldr	r3, [pc, #84]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae8:	f023 0202 	bic.w	r2, r3, #2
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af0:	4912      	ldr	r1, [pc, #72]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002af6:	4b11      	ldr	r3, [pc, #68]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afa:	4a10      	ldr	r2, [pc, #64]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b02:	4b0e      	ldr	r3, [pc, #56]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b06:	4a0d      	ldr	r2, [pc, #52]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b12:	4a0a      	ldr	r2, [pc, #40]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002b14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b1a:	4b08      	ldr	r3, [pc, #32]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1e:	4a07      	ldr	r2, [pc, #28]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b26:	4b05      	ldr	r3, [pc, #20]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a04      	ldr	r2, [pc, #16]	@ (8002b3c <HAL_RCC_OscConfig+0x76c>)
 8002b2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b32:	f7fe fba1 	bl	8001278 <HAL_GetTick>
 8002b36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b38:	e011      	b.n	8002b5e <HAL_RCC_OscConfig+0x78e>
 8002b3a:	bf00      	nop
 8002b3c:	58024400 	.word	0x58024400
 8002b40:	58024800 	.word	0x58024800
 8002b44:	fffffc0c 	.word	0xfffffc0c
 8002b48:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7fe fb94 	bl	8001278 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e08a      	b.n	8002c74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b5e:	4b47      	ldr	r3, [pc, #284]	@ (8002c7c <HAL_RCC_OscConfig+0x8ac>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x77c>
 8002b6a:	e082      	b.n	8002c72 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6c:	4b43      	ldr	r3, [pc, #268]	@ (8002c7c <HAL_RCC_OscConfig+0x8ac>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a42      	ldr	r2, [pc, #264]	@ (8002c7c <HAL_RCC_OscConfig+0x8ac>)
 8002b72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fe fb7e 	bl	8001278 <HAL_GetTick>
 8002b7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b80:	f7fe fb7a 	bl	8001278 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e070      	b.n	8002c74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b92:	4b3a      	ldr	r3, [pc, #232]	@ (8002c7c <HAL_RCC_OscConfig+0x8ac>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x7b0>
 8002b9e:	e068      	b.n	8002c72 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ba0:	4b36      	ldr	r3, [pc, #216]	@ (8002c7c <HAL_RCC_OscConfig+0x8ac>)
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ba6:	4b35      	ldr	r3, [pc, #212]	@ (8002c7c <HAL_RCC_OscConfig+0x8ac>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002baa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d031      	beq.n	8002c18 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	f003 0203 	and.w	r2, r3, #3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d12a      	bne.n	8002c18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d122      	bne.n	8002c18 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bdc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d11a      	bne.n	8002c18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	0a5b      	lsrs	r3, r3, #9
 8002be6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d111      	bne.n	8002c18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	0c1b      	lsrs	r3, r3, #16
 8002bf8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c00:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d108      	bne.n	8002c18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	0e1b      	lsrs	r3, r3, #24
 8002c0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c12:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d001      	beq.n	8002c1c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e02b      	b.n	8002c74 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c1c:	4b17      	ldr	r3, [pc, #92]	@ (8002c7c <HAL_RCC_OscConfig+0x8ac>)
 8002c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c20:	08db      	lsrs	r3, r3, #3
 8002c22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c26:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d01f      	beq.n	8002c72 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c32:	4b12      	ldr	r3, [pc, #72]	@ (8002c7c <HAL_RCC_OscConfig+0x8ac>)
 8002c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c36:	4a11      	ldr	r2, [pc, #68]	@ (8002c7c <HAL_RCC_OscConfig+0x8ac>)
 8002c38:	f023 0301 	bic.w	r3, r3, #1
 8002c3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c3e:	f7fe fb1b 	bl	8001278 <HAL_GetTick>
 8002c42:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c44:	bf00      	nop
 8002c46:	f7fe fb17 	bl	8001278 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d0f9      	beq.n	8002c46 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c52:	4b0a      	ldr	r3, [pc, #40]	@ (8002c7c <HAL_RCC_OscConfig+0x8ac>)
 8002c54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c56:	4b0a      	ldr	r3, [pc, #40]	@ (8002c80 <HAL_RCC_OscConfig+0x8b0>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c5e:	00d2      	lsls	r2, r2, #3
 8002c60:	4906      	ldr	r1, [pc, #24]	@ (8002c7c <HAL_RCC_OscConfig+0x8ac>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c66:	4b05      	ldr	r3, [pc, #20]	@ (8002c7c <HAL_RCC_OscConfig+0x8ac>)
 8002c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6a:	4a04      	ldr	r2, [pc, #16]	@ (8002c7c <HAL_RCC_OscConfig+0x8ac>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3730      	adds	r7, #48	@ 0x30
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	58024400 	.word	0x58024400
 8002c80:	ffff0007 	.word	0xffff0007

08002c84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e19c      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c98:	4b8a      	ldr	r3, [pc, #552]	@ (8002ec4 <HAL_RCC_ClockConfig+0x240>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 030f 	and.w	r3, r3, #15
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d910      	bls.n	8002cc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca6:	4b87      	ldr	r3, [pc, #540]	@ (8002ec4 <HAL_RCC_ClockConfig+0x240>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 020f 	bic.w	r2, r3, #15
 8002cae:	4985      	ldr	r1, [pc, #532]	@ (8002ec4 <HAL_RCC_ClockConfig+0x240>)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb6:	4b83      	ldr	r3, [pc, #524]	@ (8002ec4 <HAL_RCC_ClockConfig+0x240>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 030f 	and.w	r3, r3, #15
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e184      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d010      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	4b7b      	ldr	r3, [pc, #492]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d908      	bls.n	8002cf6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ce4:	4b78      	ldr	r3, [pc, #480]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	4975      	ldr	r1, [pc, #468]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d010      	beq.n	8002d24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	4b70      	ldr	r3, [pc, #448]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d908      	bls.n	8002d24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d12:	4b6d      	ldr	r3, [pc, #436]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	496a      	ldr	r1, [pc, #424]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0310 	and.w	r3, r3, #16
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d010      	beq.n	8002d52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699a      	ldr	r2, [r3, #24]
 8002d34:	4b64      	ldr	r3, [pc, #400]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d908      	bls.n	8002d52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d40:	4b61      	ldr	r3, [pc, #388]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	495e      	ldr	r1, [pc, #376]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d010      	beq.n	8002d80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69da      	ldr	r2, [r3, #28]
 8002d62:	4b59      	ldr	r3, [pc, #356]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d908      	bls.n	8002d80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d6e:	4b56      	ldr	r3, [pc, #344]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	4953      	ldr	r1, [pc, #332]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d010      	beq.n	8002dae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	4b4d      	ldr	r3, [pc, #308]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	f003 030f 	and.w	r3, r3, #15
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d908      	bls.n	8002dae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d9c:	4b4a      	ldr	r3, [pc, #296]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	f023 020f 	bic.w	r2, r3, #15
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	4947      	ldr	r1, [pc, #284]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d055      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002dba:	4b43      	ldr	r3, [pc, #268]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	4940      	ldr	r1, [pc, #256]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dd4:	4b3c      	ldr	r3, [pc, #240]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d121      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0f6      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dec:	4b36      	ldr	r3, [pc, #216]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d115      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0ea      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e04:	4b30      	ldr	r3, [pc, #192]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d109      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0de      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e14:	4b2c      	ldr	r3, [pc, #176]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0d6      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e24:	4b28      	ldr	r3, [pc, #160]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f023 0207 	bic.w	r2, r3, #7
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	4925      	ldr	r1, [pc, #148]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e36:	f7fe fa1f 	bl	8001278 <HAL_GetTick>
 8002e3a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3c:	e00a      	b.n	8002e54 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e3e:	f7fe fa1b 	bl	8001278 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e0be      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e54:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d1eb      	bne.n	8002e3e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d010      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	4b14      	ldr	r3, [pc, #80]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d208      	bcs.n	8002e94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e82:	4b11      	ldr	r3, [pc, #68]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f023 020f 	bic.w	r2, r3, #15
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	490e      	ldr	r1, [pc, #56]	@ (8002ec8 <HAL_RCC_ClockConfig+0x244>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e94:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec4 <HAL_RCC_ClockConfig+0x240>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d214      	bcs.n	8002ecc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea2:	4b08      	ldr	r3, [pc, #32]	@ (8002ec4 <HAL_RCC_ClockConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f023 020f 	bic.w	r2, r3, #15
 8002eaa:	4906      	ldr	r1, [pc, #24]	@ (8002ec4 <HAL_RCC_ClockConfig+0x240>)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb2:	4b04      	ldr	r3, [pc, #16]	@ (8002ec4 <HAL_RCC_ClockConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d005      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e086      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x34e>
 8002ec4:	52002000 	.word	0x52002000
 8002ec8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d010      	beq.n	8002efa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	4b3f      	ldr	r3, [pc, #252]	@ (8002fdc <HAL_RCC_ClockConfig+0x358>)
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d208      	bcs.n	8002efa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ee8:	4b3c      	ldr	r3, [pc, #240]	@ (8002fdc <HAL_RCC_ClockConfig+0x358>)
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	4939      	ldr	r1, [pc, #228]	@ (8002fdc <HAL_RCC_ClockConfig+0x358>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d010      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	4b34      	ldr	r3, [pc, #208]	@ (8002fdc <HAL_RCC_ClockConfig+0x358>)
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d208      	bcs.n	8002f28 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f16:	4b31      	ldr	r3, [pc, #196]	@ (8002fdc <HAL_RCC_ClockConfig+0x358>)
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	492e      	ldr	r1, [pc, #184]	@ (8002fdc <HAL_RCC_ClockConfig+0x358>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0310 	and.w	r3, r3, #16
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d010      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699a      	ldr	r2, [r3, #24]
 8002f38:	4b28      	ldr	r3, [pc, #160]	@ (8002fdc <HAL_RCC_ClockConfig+0x358>)
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d208      	bcs.n	8002f56 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f44:	4b25      	ldr	r3, [pc, #148]	@ (8002fdc <HAL_RCC_ClockConfig+0x358>)
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	4922      	ldr	r1, [pc, #136]	@ (8002fdc <HAL_RCC_ClockConfig+0x358>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d010      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69da      	ldr	r2, [r3, #28]
 8002f66:	4b1d      	ldr	r3, [pc, #116]	@ (8002fdc <HAL_RCC_ClockConfig+0x358>)
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d208      	bcs.n	8002f84 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f72:	4b1a      	ldr	r3, [pc, #104]	@ (8002fdc <HAL_RCC_ClockConfig+0x358>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	4917      	ldr	r1, [pc, #92]	@ (8002fdc <HAL_RCC_ClockConfig+0x358>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f84:	f000 f834 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4b14      	ldr	r3, [pc, #80]	@ (8002fdc <HAL_RCC_ClockConfig+0x358>)
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	0a1b      	lsrs	r3, r3, #8
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	4912      	ldr	r1, [pc, #72]	@ (8002fe0 <HAL_RCC_ClockConfig+0x35c>)
 8002f96:	5ccb      	ldrb	r3, [r1, r3]
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8002fdc <HAL_RCC_ClockConfig+0x358>)
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	4a0d      	ldr	r2, [pc, #52]	@ (8002fe0 <HAL_RCC_ClockConfig+0x35c>)
 8002fac:	5cd3      	ldrb	r3, [r2, r3]
 8002fae:	f003 031f 	and.w	r3, r3, #31
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe4 <HAL_RCC_ClockConfig+0x360>)
 8002fba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe8 <HAL_RCC_ClockConfig+0x364>)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8002fec <HAL_RCC_ClockConfig+0x368>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe f90c 	bl	80011e4 <HAL_InitTick>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	58024400 	.word	0x58024400
 8002fe0:	08006aac 	.word	0x08006aac
 8002fe4:	24000004 	.word	0x24000004
 8002fe8:	24000000 	.word	0x24000000
 8002fec:	24000008 	.word	0x24000008

08002ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b089      	sub	sp, #36	@ 0x24
 8002ff4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ff6:	4bb3      	ldr	r3, [pc, #716]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ffe:	2b18      	cmp	r3, #24
 8003000:	f200 8155 	bhi.w	80032ae <HAL_RCC_GetSysClockFreq+0x2be>
 8003004:	a201      	add	r2, pc, #4	@ (adr r2, 800300c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300a:	bf00      	nop
 800300c:	08003071 	.word	0x08003071
 8003010:	080032af 	.word	0x080032af
 8003014:	080032af 	.word	0x080032af
 8003018:	080032af 	.word	0x080032af
 800301c:	080032af 	.word	0x080032af
 8003020:	080032af 	.word	0x080032af
 8003024:	080032af 	.word	0x080032af
 8003028:	080032af 	.word	0x080032af
 800302c:	08003097 	.word	0x08003097
 8003030:	080032af 	.word	0x080032af
 8003034:	080032af 	.word	0x080032af
 8003038:	080032af 	.word	0x080032af
 800303c:	080032af 	.word	0x080032af
 8003040:	080032af 	.word	0x080032af
 8003044:	080032af 	.word	0x080032af
 8003048:	080032af 	.word	0x080032af
 800304c:	0800309d 	.word	0x0800309d
 8003050:	080032af 	.word	0x080032af
 8003054:	080032af 	.word	0x080032af
 8003058:	080032af 	.word	0x080032af
 800305c:	080032af 	.word	0x080032af
 8003060:	080032af 	.word	0x080032af
 8003064:	080032af 	.word	0x080032af
 8003068:	080032af 	.word	0x080032af
 800306c:	080030a3 	.word	0x080030a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003070:	4b94      	ldr	r3, [pc, #592]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	2b00      	cmp	r3, #0
 800307a:	d009      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800307c:	4b91      	ldr	r3, [pc, #580]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	08db      	lsrs	r3, r3, #3
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	4a90      	ldr	r2, [pc, #576]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
 800308c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800308e:	e111      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003090:	4b8d      	ldr	r3, [pc, #564]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003092:	61bb      	str	r3, [r7, #24]
      break;
 8003094:	e10e      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003096:	4b8d      	ldr	r3, [pc, #564]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003098:	61bb      	str	r3, [r7, #24]
      break;
 800309a:	e10b      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800309c:	4b8c      	ldr	r3, [pc, #560]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800309e:	61bb      	str	r3, [r7, #24]
      break;
 80030a0:	e108      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030a2:	4b88      	ldr	r3, [pc, #544]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80030ac:	4b85      	ldr	r3, [pc, #532]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030b8:	4b82      	ldr	r3, [pc, #520]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030c2:	4b80      	ldr	r3, [pc, #512]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c6:	08db      	lsrs	r3, r3, #3
 80030c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	fb02 f303 	mul.w	r3, r2, r3
 80030d2:	ee07 3a90 	vmov	s15, r3
 80030d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80e1 	beq.w	80032a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	f000 8083 	beq.w	80031f4 <HAL_RCC_GetSysClockFreq+0x204>
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	f200 80a1 	bhi.w	8003238 <HAL_RCC_GetSysClockFreq+0x248>
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_RCC_GetSysClockFreq+0x114>
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d056      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003102:	e099      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003104:	4b6f      	ldr	r3, [pc, #444]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b00      	cmp	r3, #0
 800310e:	d02d      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003110:	4b6c      	ldr	r3, [pc, #432]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	08db      	lsrs	r3, r3, #3
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	4a6b      	ldr	r2, [pc, #428]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
 8003120:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	ee07 3a90 	vmov	s15, r3
 8003128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	ee07 3a90 	vmov	s15, r3
 8003132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800313a:	4b62      	ldr	r3, [pc, #392]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003142:	ee07 3a90 	vmov	s15, r3
 8003146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800314a:	ed97 6a02 	vldr	s12, [r7, #8]
 800314e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80032d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800315a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800315e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003166:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800316a:	e087      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	ee07 3a90 	vmov	s15, r3
 8003172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003176:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80032d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800317a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800317e:	4b51      	ldr	r3, [pc, #324]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003186:	ee07 3a90 	vmov	s15, r3
 800318a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800318e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003192:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80032d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800319a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800319e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031ae:	e065      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	ee07 3a90 	vmov	s15, r3
 80031b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80032dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80031be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031c2:	4b40      	ldr	r3, [pc, #256]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ca:	ee07 3a90 	vmov	s15, r3
 80031ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031d6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80032d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031f2:	e043      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	ee07 3a90 	vmov	s15, r3
 80031fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031fe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80032e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003206:	4b2f      	ldr	r3, [pc, #188]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800320e:	ee07 3a90 	vmov	s15, r3
 8003212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003216:	ed97 6a02 	vldr	s12, [r7, #8]
 800321a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80032d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800321e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003226:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800322a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800322e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003232:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003236:	e021      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	ee07 3a90 	vmov	s15, r3
 800323e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003242:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80032dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800324a:	4b1e      	ldr	r3, [pc, #120]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003252:	ee07 3a90 	vmov	s15, r3
 8003256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800325a:	ed97 6a02 	vldr	s12, [r7, #8]
 800325e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80032d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800326a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800326e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003276:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800327a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800327c:	4b11      	ldr	r3, [pc, #68]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003280:	0a5b      	lsrs	r3, r3, #9
 8003282:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003286:	3301      	adds	r3, #1
 8003288:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	ee07 3a90 	vmov	s15, r3
 8003290:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003294:	edd7 6a07 	vldr	s13, [r7, #28]
 8003298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800329c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032a0:	ee17 3a90 	vmov	r3, s15
 80032a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80032a6:	e005      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61bb      	str	r3, [r7, #24]
      break;
 80032ac:	e002      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80032ae:	4b07      	ldr	r3, [pc, #28]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032b0:	61bb      	str	r3, [r7, #24]
      break;
 80032b2:	bf00      	nop
  }

  return sysclockfreq;
 80032b4:	69bb      	ldr	r3, [r7, #24]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3724      	adds	r7, #36	@ 0x24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	58024400 	.word	0x58024400
 80032c8:	03d09000 	.word	0x03d09000
 80032cc:	003d0900 	.word	0x003d0900
 80032d0:	007a1200 	.word	0x007a1200
 80032d4:	46000000 	.word	0x46000000
 80032d8:	4c742400 	.word	0x4c742400
 80032dc:	4a742400 	.word	0x4a742400
 80032e0:	4af42400 	.word	0x4af42400

080032e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80032ea:	f7ff fe81 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 80032ee:	4602      	mov	r2, r0
 80032f0:	4b10      	ldr	r3, [pc, #64]	@ (8003334 <HAL_RCC_GetHCLKFreq+0x50>)
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	0a1b      	lsrs	r3, r3, #8
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	490f      	ldr	r1, [pc, #60]	@ (8003338 <HAL_RCC_GetHCLKFreq+0x54>)
 80032fc:	5ccb      	ldrb	r3, [r1, r3]
 80032fe:	f003 031f 	and.w	r3, r3, #31
 8003302:	fa22 f303 	lsr.w	r3, r2, r3
 8003306:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003308:	4b0a      	ldr	r3, [pc, #40]	@ (8003334 <HAL_RCC_GetHCLKFreq+0x50>)
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	4a09      	ldr	r2, [pc, #36]	@ (8003338 <HAL_RCC_GetHCLKFreq+0x54>)
 8003312:	5cd3      	ldrb	r3, [r2, r3]
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	fa22 f303 	lsr.w	r3, r2, r3
 800331e:	4a07      	ldr	r2, [pc, #28]	@ (800333c <HAL_RCC_GetHCLKFreq+0x58>)
 8003320:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003322:	4a07      	ldr	r2, [pc, #28]	@ (8003340 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003328:	4b04      	ldr	r3, [pc, #16]	@ (800333c <HAL_RCC_GetHCLKFreq+0x58>)
 800332a:	681b      	ldr	r3, [r3, #0]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	58024400 	.word	0x58024400
 8003338:	08006aac 	.word	0x08006aac
 800333c:	24000004 	.word	0x24000004
 8003340:	24000000 	.word	0x24000000

08003344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003348:	f7ff ffcc 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 800334c:	4602      	mov	r2, r0
 800334e:	4b06      	ldr	r3, [pc, #24]	@ (8003368 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	091b      	lsrs	r3, r3, #4
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	4904      	ldr	r1, [pc, #16]	@ (800336c <HAL_RCC_GetPCLK1Freq+0x28>)
 800335a:	5ccb      	ldrb	r3, [r1, r3]
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}
 8003368:	58024400 	.word	0x58024400
 800336c:	08006aac 	.word	0x08006aac

08003370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003374:	f7ff ffb6 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 8003378:	4602      	mov	r2, r0
 800337a:	4b06      	ldr	r3, [pc, #24]	@ (8003394 <HAL_RCC_GetPCLK2Freq+0x24>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	0a1b      	lsrs	r3, r3, #8
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	4904      	ldr	r1, [pc, #16]	@ (8003398 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003386:	5ccb      	ldrb	r3, [r1, r3]
 8003388:	f003 031f 	and.w	r3, r3, #31
 800338c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003390:	4618      	mov	r0, r3
 8003392:	bd80      	pop	{r7, pc}
 8003394:	58024400 	.word	0x58024400
 8003398:	08006aac 	.word	0x08006aac

0800339c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800339c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a0:	b0ca      	sub	sp, #296	@ 0x128
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033a8:	2300      	movs	r3, #0
 80033aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033ae:	2300      	movs	r3, #0
 80033b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033bc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80033c0:	2500      	movs	r5, #0
 80033c2:	ea54 0305 	orrs.w	r3, r4, r5
 80033c6:	d049      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80033c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033d2:	d02f      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80033d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033d8:	d828      	bhi.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033de:	d01a      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80033e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033e4:	d822      	bhi.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80033ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033ee:	d007      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033f0:	e01c      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f2:	4bb8      	ldr	r3, [pc, #736]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f6:	4ab7      	ldr	r2, [pc, #732]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033fe:	e01a      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003404:	3308      	adds	r3, #8
 8003406:	2102      	movs	r1, #2
 8003408:	4618      	mov	r0, r3
 800340a:	f001 fc8f 	bl	8004d2c <RCCEx_PLL2_Config>
 800340e:	4603      	mov	r3, r0
 8003410:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003414:	e00f      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800341a:	3328      	adds	r3, #40	@ 0x28
 800341c:	2102      	movs	r1, #2
 800341e:	4618      	mov	r0, r3
 8003420:	f001 fd36 	bl	8004e90 <RCCEx_PLL3_Config>
 8003424:	4603      	mov	r3, r0
 8003426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800342a:	e004      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003432:	e000      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10a      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800343e:	4ba5      	ldr	r3, [pc, #660]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003442:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800344c:	4aa1      	ldr	r2, [pc, #644]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800344e:	430b      	orrs	r3, r1
 8003450:	6513      	str	r3, [r2, #80]	@ 0x50
 8003452:	e003      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003454:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003458:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800345c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003464:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003468:	f04f 0900 	mov.w	r9, #0
 800346c:	ea58 0309 	orrs.w	r3, r8, r9
 8003470:	d047      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003478:	2b04      	cmp	r3, #4
 800347a:	d82a      	bhi.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800347c:	a201      	add	r2, pc, #4	@ (adr r2, 8003484 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800347e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003482:	bf00      	nop
 8003484:	08003499 	.word	0x08003499
 8003488:	080034a7 	.word	0x080034a7
 800348c:	080034bd 	.word	0x080034bd
 8003490:	080034db 	.word	0x080034db
 8003494:	080034db 	.word	0x080034db
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003498:	4b8e      	ldr	r3, [pc, #568]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800349a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349c:	4a8d      	ldr	r2, [pc, #564]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800349e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034a4:	e01a      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034aa:	3308      	adds	r3, #8
 80034ac:	2100      	movs	r1, #0
 80034ae:	4618      	mov	r0, r3
 80034b0:	f001 fc3c 	bl	8004d2c <RCCEx_PLL2_Config>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034ba:	e00f      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c0:	3328      	adds	r3, #40	@ 0x28
 80034c2:	2100      	movs	r1, #0
 80034c4:	4618      	mov	r0, r3
 80034c6:	f001 fce3 	bl	8004e90 <RCCEx_PLL3_Config>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034d0:	e004      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034d8:	e000      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80034da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10a      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034e4:	4b7b      	ldr	r3, [pc, #492]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e8:	f023 0107 	bic.w	r1, r3, #7
 80034ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f2:	4a78      	ldr	r2, [pc, #480]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034f4:	430b      	orrs	r3, r1
 80034f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80034f8:	e003      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800350e:	f04f 0b00 	mov.w	fp, #0
 8003512:	ea5a 030b 	orrs.w	r3, sl, fp
 8003516:	d04c      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800351c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003522:	d030      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003524:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003528:	d829      	bhi.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800352a:	2bc0      	cmp	r3, #192	@ 0xc0
 800352c:	d02d      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800352e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003530:	d825      	bhi.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003532:	2b80      	cmp	r3, #128	@ 0x80
 8003534:	d018      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003536:	2b80      	cmp	r3, #128	@ 0x80
 8003538:	d821      	bhi.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800353e:	2b40      	cmp	r3, #64	@ 0x40
 8003540:	d007      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003542:	e01c      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003544:	4b63      	ldr	r3, [pc, #396]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003548:	4a62      	ldr	r2, [pc, #392]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800354a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800354e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003550:	e01c      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003556:	3308      	adds	r3, #8
 8003558:	2100      	movs	r1, #0
 800355a:	4618      	mov	r0, r3
 800355c:	f001 fbe6 	bl	8004d2c <RCCEx_PLL2_Config>
 8003560:	4603      	mov	r3, r0
 8003562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003566:	e011      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356c:	3328      	adds	r3, #40	@ 0x28
 800356e:	2100      	movs	r1, #0
 8003570:	4618      	mov	r0, r3
 8003572:	f001 fc8d 	bl	8004e90 <RCCEx_PLL3_Config>
 8003576:	4603      	mov	r3, r0
 8003578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800357c:	e006      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003584:	e002      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003586:	bf00      	nop
 8003588:	e000      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800358a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800358c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10a      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003594:	4b4f      	ldr	r3, [pc, #316]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003598:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800359c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a2:	4a4c      	ldr	r2, [pc, #304]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80035a8:	e003      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ba:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80035be:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80035c2:	2300      	movs	r3, #0
 80035c4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80035c8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80035cc:	460b      	mov	r3, r1
 80035ce:	4313      	orrs	r3, r2
 80035d0:	d053      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80035d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80035da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035de:	d035      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80035e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035e4:	d82e      	bhi.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035e6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80035ea:	d031      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80035ec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80035f0:	d828      	bhi.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035f6:	d01a      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80035f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035fc:	d822      	bhi.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003602:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003606:	d007      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003608:	e01c      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800360a:	4b32      	ldr	r3, [pc, #200]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800360c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360e:	4a31      	ldr	r2, [pc, #196]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003614:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003616:	e01c      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800361c:	3308      	adds	r3, #8
 800361e:	2100      	movs	r1, #0
 8003620:	4618      	mov	r0, r3
 8003622:	f001 fb83 	bl	8004d2c <RCCEx_PLL2_Config>
 8003626:	4603      	mov	r3, r0
 8003628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800362c:	e011      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800362e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003632:	3328      	adds	r3, #40	@ 0x28
 8003634:	2100      	movs	r1, #0
 8003636:	4618      	mov	r0, r3
 8003638:	f001 fc2a 	bl	8004e90 <RCCEx_PLL3_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003642:	e006      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800364a:	e002      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800364c:	bf00      	nop
 800364e:	e000      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10b      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800365a:	4b1e      	ldr	r3, [pc, #120]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800365c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800365e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003666:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800366a:	4a1a      	ldr	r2, [pc, #104]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800366c:	430b      	orrs	r3, r1
 800366e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003670:	e003      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003676:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800367a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003682:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003686:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800368a:	2300      	movs	r3, #0
 800368c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003690:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003694:	460b      	mov	r3, r1
 8003696:	4313      	orrs	r3, r2
 8003698:	d056      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800369a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80036a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036a6:	d038      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80036a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036ac:	d831      	bhi.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036b2:	d034      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80036b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036b8:	d82b      	bhi.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036be:	d01d      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x360>
 80036c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036c4:	d825      	bhi.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d006      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80036ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036ce:	d00a      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80036d0:	e01f      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036d2:	bf00      	nop
 80036d4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d8:	4ba2      	ldr	r3, [pc, #648]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036dc:	4aa1      	ldr	r2, [pc, #644]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036e4:	e01c      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ea:	3308      	adds	r3, #8
 80036ec:	2100      	movs	r1, #0
 80036ee:	4618      	mov	r0, r3
 80036f0:	f001 fb1c 	bl	8004d2c <RCCEx_PLL2_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80036fa:	e011      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003700:	3328      	adds	r3, #40	@ 0x28
 8003702:	2100      	movs	r1, #0
 8003704:	4618      	mov	r0, r3
 8003706:	f001 fbc3 	bl	8004e90 <RCCEx_PLL3_Config>
 800370a:	4603      	mov	r3, r0
 800370c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003710:	e006      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003718:	e002      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800371a:	bf00      	nop
 800371c:	e000      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800371e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10b      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003728:	4b8e      	ldr	r3, [pc, #568]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800372a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003734:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003738:	4a8a      	ldr	r2, [pc, #552]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800373a:	430b      	orrs	r3, r1
 800373c:	6593      	str	r3, [r2, #88]	@ 0x58
 800373e:	e003      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003744:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003750:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003754:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003758:	2300      	movs	r3, #0
 800375a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800375e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003762:	460b      	mov	r3, r1
 8003764:	4313      	orrs	r3, r2
 8003766:	d03a      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800376e:	2b30      	cmp	r3, #48	@ 0x30
 8003770:	d01f      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003772:	2b30      	cmp	r3, #48	@ 0x30
 8003774:	d819      	bhi.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003776:	2b20      	cmp	r3, #32
 8003778:	d00c      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800377a:	2b20      	cmp	r3, #32
 800377c:	d815      	bhi.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800377e:	2b00      	cmp	r3, #0
 8003780:	d019      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003782:	2b10      	cmp	r3, #16
 8003784:	d111      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003786:	4b77      	ldr	r3, [pc, #476]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378a:	4a76      	ldr	r2, [pc, #472]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800378c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003790:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003792:	e011      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003798:	3308      	adds	r3, #8
 800379a:	2102      	movs	r1, #2
 800379c:	4618      	mov	r0, r3
 800379e:	f001 fac5 	bl	8004d2c <RCCEx_PLL2_Config>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80037a8:	e006      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037b0:	e002      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80037b2:	bf00      	nop
 80037b4:	e000      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80037b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10a      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80037c0:	4b68      	ldr	r3, [pc, #416]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037c4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80037c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ce:	4a65      	ldr	r2, [pc, #404]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037d0:	430b      	orrs	r3, r1
 80037d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037d4:	e003      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80037de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80037ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80037ee:	2300      	movs	r3, #0
 80037f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80037f4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4313      	orrs	r3, r2
 80037fc:	d051      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80037fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003804:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003808:	d035      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800380a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800380e:	d82e      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003810:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003814:	d031      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003816:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800381a:	d828      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800381c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003820:	d01a      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003826:	d822      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800382c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003830:	d007      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003832:	e01c      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003834:	4b4b      	ldr	r3, [pc, #300]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003838:	4a4a      	ldr	r2, [pc, #296]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800383a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800383e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003840:	e01c      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003846:	3308      	adds	r3, #8
 8003848:	2100      	movs	r1, #0
 800384a:	4618      	mov	r0, r3
 800384c:	f001 fa6e 	bl	8004d2c <RCCEx_PLL2_Config>
 8003850:	4603      	mov	r3, r0
 8003852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003856:	e011      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385c:	3328      	adds	r3, #40	@ 0x28
 800385e:	2100      	movs	r1, #0
 8003860:	4618      	mov	r0, r3
 8003862:	f001 fb15 	bl	8004e90 <RCCEx_PLL3_Config>
 8003866:	4603      	mov	r3, r0
 8003868:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800386c:	e006      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003874:	e002      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003876:	bf00      	nop
 8003878:	e000      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800387a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800387c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10a      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003884:	4b37      	ldr	r3, [pc, #220]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003888:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003890:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003892:	4a34      	ldr	r2, [pc, #208]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003894:	430b      	orrs	r3, r1
 8003896:	6513      	str	r3, [r2, #80]	@ 0x50
 8003898:	e003      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800389e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038aa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80038ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038b2:	2300      	movs	r3, #0
 80038b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80038b8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80038bc:	460b      	mov	r3, r1
 80038be:	4313      	orrs	r3, r2
 80038c0:	d056      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80038c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038cc:	d033      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80038ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038d2:	d82c      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038d8:	d02f      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80038da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038de:	d826      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038e4:	d02b      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80038e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038ea:	d820      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038f0:	d012      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80038f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038f6:	d81a      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d022      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80038fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003900:	d115      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003906:	3308      	adds	r3, #8
 8003908:	2101      	movs	r1, #1
 800390a:	4618      	mov	r0, r3
 800390c:	f001 fa0e 	bl	8004d2c <RCCEx_PLL2_Config>
 8003910:	4603      	mov	r3, r0
 8003912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003916:	e015      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391c:	3328      	adds	r3, #40	@ 0x28
 800391e:	2101      	movs	r1, #1
 8003920:	4618      	mov	r0, r3
 8003922:	f001 fab5 	bl	8004e90 <RCCEx_PLL3_Config>
 8003926:	4603      	mov	r3, r0
 8003928:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800392c:	e00a      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003934:	e006      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003936:	bf00      	nop
 8003938:	e004      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800393a:	bf00      	nop
 800393c:	e002      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800393e:	bf00      	nop
 8003940:	e000      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10d      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800394c:	4b05      	ldr	r3, [pc, #20]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800394e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003950:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003958:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800395a:	4a02      	ldr	r2, [pc, #8]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800395c:	430b      	orrs	r3, r1
 800395e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003960:	e006      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003962:	bf00      	nop
 8003964:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800396c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003978:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800397c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003980:	2300      	movs	r3, #0
 8003982:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003986:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800398a:	460b      	mov	r3, r1
 800398c:	4313      	orrs	r3, r2
 800398e:	d055      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003994:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003998:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800399c:	d033      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800399e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039a2:	d82c      	bhi.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039a8:	d02f      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80039aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ae:	d826      	bhi.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039b4:	d02b      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80039b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039ba:	d820      	bhi.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039c0:	d012      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80039c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039c6:	d81a      	bhi.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d022      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80039cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039d0:	d115      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d6:	3308      	adds	r3, #8
 80039d8:	2101      	movs	r1, #1
 80039da:	4618      	mov	r0, r3
 80039dc:	f001 f9a6 	bl	8004d2c <RCCEx_PLL2_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039e6:	e015      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ec:	3328      	adds	r3, #40	@ 0x28
 80039ee:	2101      	movs	r1, #1
 80039f0:	4618      	mov	r0, r3
 80039f2:	f001 fa4d 	bl	8004e90 <RCCEx_PLL3_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039fc:	e00a      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a04:	e006      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a06:	bf00      	nop
 8003a08:	e004      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a0a:	bf00      	nop
 8003a0c:	e002      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a0e:	bf00      	nop
 8003a10:	e000      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10b      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a1c:	4ba3      	ldr	r3, [pc, #652]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a20:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a2c:	4a9f      	ldr	r2, [pc, #636]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a32:	e003      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a44:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003a48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003a52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a56:	460b      	mov	r3, r1
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	d037      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a66:	d00e      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003a68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a6c:	d816      	bhi.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d018      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003a72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a76:	d111      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a78:	4b8c      	ldr	r3, [pc, #560]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	4a8b      	ldr	r2, [pc, #556]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a84:	e00f      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 f94c 	bl	8004d2c <RCCEx_PLL2_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a9a:	e004      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10a      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003aae:	4b7f      	ldr	r3, [pc, #508]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ab2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003abc:	4a7b      	ldr	r2, [pc, #492]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003abe:	430b      	orrs	r3, r1
 8003ac0:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ac2:	e003      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ac8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003adc:	2300      	movs	r3, #0
 8003ade:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003ae2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	d039      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	d81c      	bhi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003af6:	a201      	add	r2, pc, #4	@ (adr r2, 8003afc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afc:	08003b39 	.word	0x08003b39
 8003b00:	08003b0d 	.word	0x08003b0d
 8003b04:	08003b1b 	.word	0x08003b1b
 8003b08:	08003b39 	.word	0x08003b39
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b0c:	4b67      	ldr	r3, [pc, #412]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b10:	4a66      	ldr	r2, [pc, #408]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b18:	e00f      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1e:	3308      	adds	r3, #8
 8003b20:	2102      	movs	r1, #2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f001 f902 	bl	8004d2c <RCCEx_PLL2_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b2e:	e004      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b36:	e000      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10a      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b42:	4b5a      	ldr	r3, [pc, #360]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b46:	f023 0103 	bic.w	r1, r3, #3
 8003b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b50:	4a56      	ldr	r2, [pc, #344]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b52:	430b      	orrs	r3, r1
 8003b54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b56:	e003      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b68:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003b6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b70:	2300      	movs	r3, #0
 8003b72:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b76:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f000 809f 	beq.w	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b82:	4b4b      	ldr	r3, [pc, #300]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a4a      	ldr	r2, [pc, #296]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b8e:	f7fd fb73 	bl	8001278 <HAL_GetTick>
 8003b92:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b96:	e00b      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b98:	f7fd fb6e 	bl	8001278 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b64      	cmp	r3, #100	@ 0x64
 8003ba6:	d903      	bls.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bae:	e005      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bb0:	4b3f      	ldr	r3, [pc, #252]	@ (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0ed      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d179      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003bc4:	4b39      	ldr	r3, [pc, #228]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bd0:	4053      	eors	r3, r2
 8003bd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d015      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bda:	4b34      	ldr	r3, [pc, #208]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003be2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003be6:	4b31      	ldr	r3, [pc, #196]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bea:	4a30      	ldr	r2, [pc, #192]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bf0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bf2:	4b2e      	ldr	r3, [pc, #184]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf6:	4a2d      	ldr	r2, [pc, #180]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bfc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003bfe:	4a2b      	ldr	r2, [pc, #172]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c04:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c12:	d118      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c14:	f7fd fb30 	bl	8001278 <HAL_GetTick>
 8003c18:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c1c:	e00d      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1e:	f7fd fb2b 	bl	8001278 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c28:	1ad2      	subs	r2, r2, r3
 8003c2a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d903      	bls.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003c38:	e005      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0eb      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d129      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c5e:	d10e      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003c60:	4b12      	ldr	r3, [pc, #72]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c70:	091a      	lsrs	r2, r3, #4
 8003c72:	4b10      	ldr	r3, [pc, #64]	@ (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	4a0d      	ldr	r2, [pc, #52]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	6113      	str	r3, [r2, #16]
 8003c7c:	e005      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	4a0a      	ldr	r2, [pc, #40]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c84:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c88:	6113      	str	r3, [r2, #16]
 8003c8a:	4b08      	ldr	r3, [pc, #32]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c8c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c9a:	4a04      	ldr	r2, [pc, #16]	@ (8003cac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ca0:	e00e      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003caa:	e009      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003cac:	58024400 	.word	0x58024400
 8003cb0:	58024800 	.word	0x58024800
 8003cb4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc8:	f002 0301 	and.w	r3, r2, #1
 8003ccc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003cd6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f000 8089 	beq.w	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ce8:	2b28      	cmp	r3, #40	@ 0x28
 8003cea:	d86b      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003cec:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf2:	bf00      	nop
 8003cf4:	08003dcd 	.word	0x08003dcd
 8003cf8:	08003dc5 	.word	0x08003dc5
 8003cfc:	08003dc5 	.word	0x08003dc5
 8003d00:	08003dc5 	.word	0x08003dc5
 8003d04:	08003dc5 	.word	0x08003dc5
 8003d08:	08003dc5 	.word	0x08003dc5
 8003d0c:	08003dc5 	.word	0x08003dc5
 8003d10:	08003dc5 	.word	0x08003dc5
 8003d14:	08003d99 	.word	0x08003d99
 8003d18:	08003dc5 	.word	0x08003dc5
 8003d1c:	08003dc5 	.word	0x08003dc5
 8003d20:	08003dc5 	.word	0x08003dc5
 8003d24:	08003dc5 	.word	0x08003dc5
 8003d28:	08003dc5 	.word	0x08003dc5
 8003d2c:	08003dc5 	.word	0x08003dc5
 8003d30:	08003dc5 	.word	0x08003dc5
 8003d34:	08003daf 	.word	0x08003daf
 8003d38:	08003dc5 	.word	0x08003dc5
 8003d3c:	08003dc5 	.word	0x08003dc5
 8003d40:	08003dc5 	.word	0x08003dc5
 8003d44:	08003dc5 	.word	0x08003dc5
 8003d48:	08003dc5 	.word	0x08003dc5
 8003d4c:	08003dc5 	.word	0x08003dc5
 8003d50:	08003dc5 	.word	0x08003dc5
 8003d54:	08003dcd 	.word	0x08003dcd
 8003d58:	08003dc5 	.word	0x08003dc5
 8003d5c:	08003dc5 	.word	0x08003dc5
 8003d60:	08003dc5 	.word	0x08003dc5
 8003d64:	08003dc5 	.word	0x08003dc5
 8003d68:	08003dc5 	.word	0x08003dc5
 8003d6c:	08003dc5 	.word	0x08003dc5
 8003d70:	08003dc5 	.word	0x08003dc5
 8003d74:	08003dcd 	.word	0x08003dcd
 8003d78:	08003dc5 	.word	0x08003dc5
 8003d7c:	08003dc5 	.word	0x08003dc5
 8003d80:	08003dc5 	.word	0x08003dc5
 8003d84:	08003dc5 	.word	0x08003dc5
 8003d88:	08003dc5 	.word	0x08003dc5
 8003d8c:	08003dc5 	.word	0x08003dc5
 8003d90:	08003dc5 	.word	0x08003dc5
 8003d94:	08003dcd 	.word	0x08003dcd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9c:	3308      	adds	r3, #8
 8003d9e:	2101      	movs	r1, #1
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 ffc3 	bl	8004d2c <RCCEx_PLL2_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003dac:	e00f      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db2:	3328      	adds	r3, #40	@ 0x28
 8003db4:	2101      	movs	r1, #1
 8003db6:	4618      	mov	r0, r3
 8003db8:	f001 f86a 	bl	8004e90 <RCCEx_PLL3_Config>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003dc2:	e004      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dca:	e000      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003dd6:	4bbf      	ldr	r3, [pc, #764]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dda:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003de4:	4abb      	ldr	r2, [pc, #748]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003de6:	430b      	orrs	r3, r1
 8003de8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003dea:	e003      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003df0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f002 0302 	and.w	r3, r2, #2
 8003e00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003e0a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4313      	orrs	r3, r2
 8003e12:	d041      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e1a:	2b05      	cmp	r3, #5
 8003e1c:	d824      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e24 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e24:	08003e71 	.word	0x08003e71
 8003e28:	08003e3d 	.word	0x08003e3d
 8003e2c:	08003e53 	.word	0x08003e53
 8003e30:	08003e71 	.word	0x08003e71
 8003e34:	08003e71 	.word	0x08003e71
 8003e38:	08003e71 	.word	0x08003e71
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e40:	3308      	adds	r3, #8
 8003e42:	2101      	movs	r1, #1
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 ff71 	bl	8004d2c <RCCEx_PLL2_Config>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e50:	e00f      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e56:	3328      	adds	r3, #40	@ 0x28
 8003e58:	2101      	movs	r1, #1
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f001 f818 	bl	8004e90 <RCCEx_PLL3_Config>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e66:	e004      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e6e:	e000      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10a      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e7a:	4b96      	ldr	r3, [pc, #600]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e7e:	f023 0107 	bic.w	r1, r3, #7
 8003e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e88:	4a92      	ldr	r2, [pc, #584]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e8a:	430b      	orrs	r3, r1
 8003e8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e8e:	e003      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	f002 0304 	and.w	r3, r2, #4
 8003ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003eae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	d044      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ec0:	2b05      	cmp	r3, #5
 8003ec2:	d825      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ecc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eca:	bf00      	nop
 8003ecc:	08003f19 	.word	0x08003f19
 8003ed0:	08003ee5 	.word	0x08003ee5
 8003ed4:	08003efb 	.word	0x08003efb
 8003ed8:	08003f19 	.word	0x08003f19
 8003edc:	08003f19 	.word	0x08003f19
 8003ee0:	08003f19 	.word	0x08003f19
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee8:	3308      	adds	r3, #8
 8003eea:	2101      	movs	r1, #1
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 ff1d 	bl	8004d2c <RCCEx_PLL2_Config>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ef8:	e00f      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efe:	3328      	adds	r3, #40	@ 0x28
 8003f00:	2101      	movs	r1, #1
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 ffc4 	bl	8004e90 <RCCEx_PLL3_Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f0e:	e004      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f16:	e000      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10b      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f22:	4b6c      	ldr	r3, [pc, #432]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f26:	f023 0107 	bic.w	r1, r3, #7
 8003f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f32:	4a68      	ldr	r2, [pc, #416]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f34:	430b      	orrs	r3, r1
 8003f36:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f38:	e003      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4a:	f002 0320 	and.w	r3, r2, #32
 8003f4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f52:	2300      	movs	r3, #0
 8003f54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	d055      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f6e:	d033      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003f70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f74:	d82c      	bhi.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f7a:	d02f      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f80:	d826      	bhi.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f86:	d02b      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003f88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f8c:	d820      	bhi.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f92:	d012      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003f94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f98:	d81a      	bhi.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d022      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003f9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fa2:	d115      	bne.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa8:	3308      	adds	r3, #8
 8003faa:	2100      	movs	r1, #0
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 febd 	bl	8004d2c <RCCEx_PLL2_Config>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fb8:	e015      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fbe:	3328      	adds	r3, #40	@ 0x28
 8003fc0:	2102      	movs	r1, #2
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 ff64 	bl	8004e90 <RCCEx_PLL3_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fce:	e00a      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fd6:	e006      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fd8:	bf00      	nop
 8003fda:	e004      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fdc:	bf00      	nop
 8003fde:	e002      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fe0:	bf00      	nop
 8003fe2:	e000      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10b      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fee:	4b39      	ldr	r3, [pc, #228]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ffe:	4a35      	ldr	r2, [pc, #212]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004000:	430b      	orrs	r3, r1
 8004002:	6553      	str	r3, [r2, #84]	@ 0x54
 8004004:	e003      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800400a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800400e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004016:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800401a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800401e:	2300      	movs	r3, #0
 8004020:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004024:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004028:	460b      	mov	r3, r1
 800402a:	4313      	orrs	r3, r2
 800402c:	d058      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800402e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004032:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004036:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800403a:	d033      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800403c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004040:	d82c      	bhi.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004046:	d02f      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004048:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800404c:	d826      	bhi.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800404e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004052:	d02b      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004054:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004058:	d820      	bhi.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800405a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800405e:	d012      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004060:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004064:	d81a      	bhi.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d022      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800406a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800406e:	d115      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004074:	3308      	adds	r3, #8
 8004076:	2100      	movs	r1, #0
 8004078:	4618      	mov	r0, r3
 800407a:	f000 fe57 	bl	8004d2c <RCCEx_PLL2_Config>
 800407e:	4603      	mov	r3, r0
 8004080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004084:	e015      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408a:	3328      	adds	r3, #40	@ 0x28
 800408c:	2102      	movs	r1, #2
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fefe 	bl	8004e90 <RCCEx_PLL3_Config>
 8004094:	4603      	mov	r3, r0
 8004096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800409a:	e00a      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040a2:	e006      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040a4:	bf00      	nop
 80040a6:	e004      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040a8:	bf00      	nop
 80040aa:	e002      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040ac:	bf00      	nop
 80040ae:	e000      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10e      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040ba:	4b06      	ldr	r3, [pc, #24]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040be:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80040c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040ca:	4a02      	ldr	r2, [pc, #8]	@ (80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040cc:	430b      	orrs	r3, r1
 80040ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80040d0:	e006      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80040d2:	bf00      	nop
 80040d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80040ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040f0:	2300      	movs	r3, #0
 80040f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040f6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80040fa:	460b      	mov	r3, r1
 80040fc:	4313      	orrs	r3, r2
 80040fe:	d055      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004104:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004108:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800410c:	d033      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800410e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004112:	d82c      	bhi.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004114:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004118:	d02f      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800411a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800411e:	d826      	bhi.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004120:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004124:	d02b      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004126:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800412a:	d820      	bhi.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800412c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004130:	d012      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004132:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004136:	d81a      	bhi.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004138:	2b00      	cmp	r3, #0
 800413a:	d022      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800413c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004140:	d115      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004146:	3308      	adds	r3, #8
 8004148:	2100      	movs	r1, #0
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fdee 	bl	8004d2c <RCCEx_PLL2_Config>
 8004150:	4603      	mov	r3, r0
 8004152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004156:	e015      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415c:	3328      	adds	r3, #40	@ 0x28
 800415e:	2102      	movs	r1, #2
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fe95 	bl	8004e90 <RCCEx_PLL3_Config>
 8004166:	4603      	mov	r3, r0
 8004168:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800416c:	e00a      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004174:	e006      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004176:	bf00      	nop
 8004178:	e004      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800417a:	bf00      	nop
 800417c:	e002      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800417e:	bf00      	nop
 8004180:	e000      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004182:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004184:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10b      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800418c:	4ba1      	ldr	r3, [pc, #644]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800418e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004190:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004198:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800419c:	4a9d      	ldr	r2, [pc, #628]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800419e:	430b      	orrs	r3, r1
 80041a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80041a2:	e003      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80041ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b4:	f002 0308 	and.w	r3, r2, #8
 80041b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041bc:	2300      	movs	r3, #0
 80041be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80041c2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80041c6:	460b      	mov	r3, r1
 80041c8:	4313      	orrs	r3, r2
 80041ca:	d01e      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80041cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041d8:	d10c      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041de:	3328      	adds	r3, #40	@ 0x28
 80041e0:	2102      	movs	r1, #2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fe54 	bl	8004e90 <RCCEx_PLL3_Config>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80041f4:	4b87      	ldr	r3, [pc, #540]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004200:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004204:	4a83      	ldr	r2, [pc, #524]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004206:	430b      	orrs	r3, r1
 8004208:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800420a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004212:	f002 0310 	and.w	r3, r2, #16
 8004216:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800421a:	2300      	movs	r3, #0
 800421c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004220:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004224:	460b      	mov	r3, r1
 8004226:	4313      	orrs	r3, r2
 8004228:	d01e      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800422a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004236:	d10c      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423c:	3328      	adds	r3, #40	@ 0x28
 800423e:	2102      	movs	r1, #2
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fe25 	bl	8004e90 <RCCEx_PLL3_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004252:	4b70      	ldr	r3, [pc, #448]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004256:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800425a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004262:	4a6c      	ldr	r2, [pc, #432]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004264:	430b      	orrs	r3, r1
 8004266:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004270:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004274:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004278:	2300      	movs	r3, #0
 800427a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800427e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004282:	460b      	mov	r3, r1
 8004284:	4313      	orrs	r3, r2
 8004286:	d03e      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004290:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004294:	d022      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004296:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800429a:	d81b      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80042a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042a4:	d00b      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80042a6:	e015      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ac:	3308      	adds	r3, #8
 80042ae:	2100      	movs	r1, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fd3b 	bl	8004d2c <RCCEx_PLL2_Config>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042bc:	e00f      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c2:	3328      	adds	r3, #40	@ 0x28
 80042c4:	2102      	movs	r1, #2
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fde2 	bl	8004e90 <RCCEx_PLL3_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042d2:	e004      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042da:	e000      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80042dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10b      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80042ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042f6:	4a47      	ldr	r2, [pc, #284]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042f8:	430b      	orrs	r3, r1
 80042fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80042fc:	e003      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004302:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004312:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004314:	2300      	movs	r3, #0
 8004316:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004318:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800431c:	460b      	mov	r3, r1
 800431e:	4313      	orrs	r3, r2
 8004320:	d03b      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800432a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800432e:	d01f      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004330:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004334:	d818      	bhi.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004336:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800433a:	d003      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800433c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004340:	d007      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004342:	e011      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004344:	4b33      	ldr	r3, [pc, #204]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004348:	4a32      	ldr	r2, [pc, #200]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800434a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800434e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004350:	e00f      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004356:	3328      	adds	r3, #40	@ 0x28
 8004358:	2101      	movs	r1, #1
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fd98 	bl	8004e90 <RCCEx_PLL3_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004366:	e004      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800436e:	e000      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10b      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800437a:	4b26      	ldr	r3, [pc, #152]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800437c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438a:	4a22      	ldr	r2, [pc, #136]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800438c:	430b      	orrs	r3, r1
 800438e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004390:	e003      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004392:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004396:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800439a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80043a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80043a8:	2300      	movs	r3, #0
 80043aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80043ac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80043b0:	460b      	mov	r3, r1
 80043b2:	4313      	orrs	r3, r2
 80043b4:	d034      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80043b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80043c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043c4:	d007      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80043c6:	e011      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043c8:	4b12      	ldr	r3, [pc, #72]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043cc:	4a11      	ldr	r2, [pc, #68]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043d4:	e00e      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043da:	3308      	adds	r3, #8
 80043dc:	2102      	movs	r1, #2
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fca4 	bl	8004d2c <RCCEx_PLL2_Config>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043ea:	e003      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10d      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80043fc:	4b05      	ldr	r3, [pc, #20]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004400:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800440a:	4a02      	ldr	r2, [pc, #8]	@ (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800440c:	430b      	orrs	r3, r1
 800440e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004410:	e006      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004412:	bf00      	nop
 8004414:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004418:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800441c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800442c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800442e:	2300      	movs	r3, #0
 8004430:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004432:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004436:	460b      	mov	r3, r1
 8004438:	4313      	orrs	r3, r2
 800443a:	d00c      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800443c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004440:	3328      	adds	r3, #40	@ 0x28
 8004442:	2102      	movs	r1, #2
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fd23 	bl	8004e90 <RCCEx_PLL3_Config>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004462:	663b      	str	r3, [r7, #96]	@ 0x60
 8004464:	2300      	movs	r3, #0
 8004466:	667b      	str	r3, [r7, #100]	@ 0x64
 8004468:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800446c:	460b      	mov	r3, r1
 800446e:	4313      	orrs	r3, r2
 8004470:	d038      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800447a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800447e:	d018      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004480:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004484:	d811      	bhi.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004486:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800448a:	d014      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800448c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004490:	d80b      	bhi.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004492:	2b00      	cmp	r3, #0
 8004494:	d011      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004496:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800449a:	d106      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800449c:	4bc3      	ldr	r3, [pc, #780]	@ (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800449e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a0:	4ac2      	ldr	r2, [pc, #776]	@ (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80044a8:	e008      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044b0:	e004      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044b2:	bf00      	nop
 80044b4:	e002      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044b6:	bf00      	nop
 80044b8:	e000      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10b      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044c4:	4bb9      	ldr	r3, [pc, #740]	@ (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044d4:	4ab5      	ldr	r2, [pc, #724]	@ (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044d6:	430b      	orrs	r3, r1
 80044d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80044da:	e003      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80044f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044f2:	2300      	movs	r3, #0
 80044f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044f6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80044fa:	460b      	mov	r3, r1
 80044fc:	4313      	orrs	r3, r2
 80044fe:	d009      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004500:	4baa      	ldr	r3, [pc, #680]	@ (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004504:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800450e:	4aa7      	ldr	r2, [pc, #668]	@ (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004510:	430b      	orrs	r3, r1
 8004512:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004520:	653b      	str	r3, [r7, #80]	@ 0x50
 8004522:	2300      	movs	r3, #0
 8004524:	657b      	str	r3, [r7, #84]	@ 0x54
 8004526:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800452a:	460b      	mov	r3, r1
 800452c:	4313      	orrs	r3, r2
 800452e:	d00a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004530:	4b9e      	ldr	r3, [pc, #632]	@ (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004540:	4a9a      	ldr	r2, [pc, #616]	@ (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004542:	430b      	orrs	r3, r1
 8004544:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004552:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004554:	2300      	movs	r3, #0
 8004556:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004558:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800455c:	460b      	mov	r3, r1
 800455e:	4313      	orrs	r3, r2
 8004560:	d009      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004562:	4b92      	ldr	r3, [pc, #584]	@ (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004566:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800456a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004570:	4a8e      	ldr	r2, [pc, #568]	@ (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004572:	430b      	orrs	r3, r1
 8004574:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004582:	643b      	str	r3, [r7, #64]	@ 0x40
 8004584:	2300      	movs	r3, #0
 8004586:	647b      	str	r3, [r7, #68]	@ 0x44
 8004588:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800458c:	460b      	mov	r3, r1
 800458e:	4313      	orrs	r3, r2
 8004590:	d00e      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004592:	4b86      	ldr	r3, [pc, #536]	@ (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	4a85      	ldr	r2, [pc, #532]	@ (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004598:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800459c:	6113      	str	r3, [r2, #16]
 800459e:	4b83      	ldr	r3, [pc, #524]	@ (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045a0:	6919      	ldr	r1, [r3, #16]
 80045a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80045aa:	4a80      	ldr	r2, [pc, #512]	@ (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ac:	430b      	orrs	r3, r1
 80045ae:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80045bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045be:	2300      	movs	r3, #0
 80045c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045c2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80045c6:	460b      	mov	r3, r1
 80045c8:	4313      	orrs	r3, r2
 80045ca:	d009      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80045cc:	4b77      	ldr	r3, [pc, #476]	@ (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045d0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80045d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045da:	4a74      	ldr	r2, [pc, #464]	@ (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045dc:	430b      	orrs	r3, r1
 80045de:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80045ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80045ee:	2300      	movs	r3, #0
 80045f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80045f2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80045f6:	460b      	mov	r3, r1
 80045f8:	4313      	orrs	r3, r2
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045fc:	4b6b      	ldr	r3, [pc, #428]	@ (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004600:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004608:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800460c:	4a67      	ldr	r2, [pc, #412]	@ (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800460e:	430b      	orrs	r3, r1
 8004610:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461a:	2100      	movs	r1, #0
 800461c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004624:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004628:	460b      	mov	r3, r1
 800462a:	4313      	orrs	r3, r2
 800462c:	d011      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004632:	3308      	adds	r3, #8
 8004634:	2100      	movs	r1, #0
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fb78 	bl	8004d2c <RCCEx_PLL2_Config>
 800463c:	4603      	mov	r3, r0
 800463e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800464e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465a:	2100      	movs	r1, #0
 800465c:	6239      	str	r1, [r7, #32]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	627b      	str	r3, [r7, #36]	@ 0x24
 8004664:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004668:	460b      	mov	r3, r1
 800466a:	4313      	orrs	r3, r2
 800466c:	d011      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800466e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004672:	3308      	adds	r3, #8
 8004674:	2101      	movs	r1, #1
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fb58 	bl	8004d2c <RCCEx_PLL2_Config>
 800467c:	4603      	mov	r3, r0
 800467e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800468e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469a:	2100      	movs	r1, #0
 800469c:	61b9      	str	r1, [r7, #24]
 800469e:	f003 0304 	and.w	r3, r3, #4
 80046a2:	61fb      	str	r3, [r7, #28]
 80046a4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80046a8:	460b      	mov	r3, r1
 80046aa:	4313      	orrs	r3, r2
 80046ac:	d011      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b2:	3308      	adds	r3, #8
 80046b4:	2102      	movs	r1, #2
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 fb38 	bl	8004d2c <RCCEx_PLL2_Config>
 80046bc:	4603      	mov	r3, r0
 80046be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80046d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046da:	2100      	movs	r1, #0
 80046dc:	6139      	str	r1, [r7, #16]
 80046de:	f003 0308 	and.w	r3, r3, #8
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80046e8:	460b      	mov	r3, r1
 80046ea:	4313      	orrs	r3, r2
 80046ec:	d011      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f2:	3328      	adds	r3, #40	@ 0x28
 80046f4:	2100      	movs	r1, #0
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fbca 	bl	8004e90 <RCCEx_PLL3_Config>
 80046fc:	4603      	mov	r3, r0
 80046fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800470e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471a:	2100      	movs	r1, #0
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	f003 0310 	and.w	r3, r3, #16
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004728:	460b      	mov	r3, r1
 800472a:	4313      	orrs	r3, r2
 800472c:	d011      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800472e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004732:	3328      	adds	r3, #40	@ 0x28
 8004734:	2101      	movs	r1, #1
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fbaa 	bl	8004e90 <RCCEx_PLL3_Config>
 800473c:	4603      	mov	r3, r0
 800473e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004742:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800474a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800474e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475a:	2100      	movs	r1, #0
 800475c:	6039      	str	r1, [r7, #0]
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	607b      	str	r3, [r7, #4]
 8004764:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004768:	460b      	mov	r3, r1
 800476a:	4313      	orrs	r3, r2
 800476c:	d011      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800476e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004772:	3328      	adds	r3, #40	@ 0x28
 8004774:	2102      	movs	r1, #2
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fb8a 	bl	8004e90 <RCCEx_PLL3_Config>
 800477c:	4603      	mov	r3, r0
 800477e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800478e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004792:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	e000      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80047a6:	46bd      	mov	sp, r7
 80047a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ac:	58024400 	.word	0x58024400

080047b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80047b4:	f7fe fd96 	bl	80032e4 <HAL_RCC_GetHCLKFreq>
 80047b8:	4602      	mov	r2, r0
 80047ba:	4b06      	ldr	r3, [pc, #24]	@ (80047d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	091b      	lsrs	r3, r3, #4
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	4904      	ldr	r1, [pc, #16]	@ (80047d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80047c6:	5ccb      	ldrb	r3, [r1, r3]
 80047c8:	f003 031f 	and.w	r3, r3, #31
 80047cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	58024400 	.word	0x58024400
 80047d8:	08006aac 	.word	0x08006aac

080047dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80047dc:	b480      	push	{r7}
 80047de:	b089      	sub	sp, #36	@ 0x24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047e4:	4ba1      	ldr	r3, [pc, #644]	@ (8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e8:	f003 0303 	and.w	r3, r3, #3
 80047ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80047ee:	4b9f      	ldr	r3, [pc, #636]	@ (8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f2:	0b1b      	lsrs	r3, r3, #12
 80047f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80047fa:	4b9c      	ldr	r3, [pc, #624]	@ (8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fe:	091b      	lsrs	r3, r3, #4
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004806:	4b99      	ldr	r3, [pc, #612]	@ (8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800480a:	08db      	lsrs	r3, r3, #3
 800480c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	fb02 f303 	mul.w	r3, r2, r3
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800481e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 8111 	beq.w	8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	2b02      	cmp	r3, #2
 800482e:	f000 8083 	beq.w	8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	2b02      	cmp	r3, #2
 8004836:	f200 80a1 	bhi.w	800497c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d056      	beq.n	80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004846:	e099      	b.n	800497c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004848:	4b88      	ldr	r3, [pc, #544]	@ (8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0320 	and.w	r3, r3, #32
 8004850:	2b00      	cmp	r3, #0
 8004852:	d02d      	beq.n	80048b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004854:	4b85      	ldr	r3, [pc, #532]	@ (8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	08db      	lsrs	r3, r3, #3
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	4a84      	ldr	r2, [pc, #528]	@ (8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004860:	fa22 f303 	lsr.w	r3, r2, r3
 8004864:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	ee07 3a90 	vmov	s15, r3
 800486c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800487e:	4b7b      	ldr	r3, [pc, #492]	@ (8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800488e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004892:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800489a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800489e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80048ae:	e087      	b.n	80049c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	ee07 3a90 	vmov	s15, r3
 80048b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80048be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c2:	4b6a      	ldr	r3, [pc, #424]	@ (8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004a74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048f2:	e065      	b.n	80049c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004906:	4b59      	ldr	r3, [pc, #356]	@ (8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004916:	ed97 6a03 	vldr	s12, [r7, #12]
 800491a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004a74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800491e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004926:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800492a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800492e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004932:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004936:	e043      	b.n	80049c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	ee07 3a90 	vmov	s15, r3
 800493e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004942:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004a80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800494a:	4b48      	ldr	r3, [pc, #288]	@ (8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800494c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800494e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800495a:	ed97 6a03 	vldr	s12, [r7, #12]
 800495e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004a74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800496a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800496e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004976:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800497a:	e021      	b.n	80049c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004986:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800498a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800498e:	4b37      	ldr	r3, [pc, #220]	@ (8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800499e:	ed97 6a03 	vldr	s12, [r7, #12]
 80049a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004a74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80049c0:	4b2a      	ldr	r3, [pc, #168]	@ (8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c4:	0a5b      	lsrs	r3, r3, #9
 80049c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049da:	edd7 6a07 	vldr	s13, [r7, #28]
 80049de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049e6:	ee17 2a90 	vmov	r2, s15
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80049ee:	4b1f      	ldr	r3, [pc, #124]	@ (8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f2:	0c1b      	lsrs	r3, r3, #16
 80049f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049f8:	ee07 3a90 	vmov	s15, r3
 80049fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a08:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a14:	ee17 2a90 	vmov	r2, s15
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004a1c:	4b13      	ldr	r3, [pc, #76]	@ (8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a20:	0e1b      	lsrs	r3, r3, #24
 8004a22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a36:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a42:	ee17 2a90 	vmov	r2, s15
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a4a:	e008      	b.n	8004a5e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	609a      	str	r2, [r3, #8]
}
 8004a5e:	bf00      	nop
 8004a60:	3724      	adds	r7, #36	@ 0x24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	58024400 	.word	0x58024400
 8004a70:	03d09000 	.word	0x03d09000
 8004a74:	46000000 	.word	0x46000000
 8004a78:	4c742400 	.word	0x4c742400
 8004a7c:	4a742400 	.word	0x4a742400
 8004a80:	4af42400 	.word	0x4af42400

08004a84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b089      	sub	sp, #36	@ 0x24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a8c:	4ba1      	ldr	r3, [pc, #644]	@ (8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a90:	f003 0303 	and.w	r3, r3, #3
 8004a94:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a96:	4b9f      	ldr	r3, [pc, #636]	@ (8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a9a:	0d1b      	lsrs	r3, r3, #20
 8004a9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004aa0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004aa2:	4b9c      	ldr	r3, [pc, #624]	@ (8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa6:	0a1b      	lsrs	r3, r3, #8
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004aae:	4b99      	ldr	r3, [pc, #612]	@ (8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab2:	08db      	lsrs	r3, r3, #3
 8004ab4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	fb02 f303 	mul.w	r3, r2, r3
 8004abe:	ee07 3a90 	vmov	s15, r3
 8004ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8111 	beq.w	8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	f000 8083 	beq.w	8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	f200 80a1 	bhi.w	8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d056      	beq.n	8004b9c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004aee:	e099      	b.n	8004c24 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004af0:	4b88      	ldr	r3, [pc, #544]	@ (8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0320 	and.w	r3, r3, #32
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d02d      	beq.n	8004b58 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004afc:	4b85      	ldr	r3, [pc, #532]	@ (8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	08db      	lsrs	r3, r3, #3
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	4a84      	ldr	r2, [pc, #528]	@ (8004d18 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	ee07 3a90 	vmov	s15, r3
 8004b14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b26:	4b7b      	ldr	r3, [pc, #492]	@ (8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2e:	ee07 3a90 	vmov	s15, r3
 8004b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b3a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004d1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b56:	e087      	b.n	8004c68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	ee07 3a90 	vmov	s15, r3
 8004b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b62:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b6a:	4b6a      	ldr	r3, [pc, #424]	@ (8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b7e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004d1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b9a:	e065      	b.n	8004c68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	ee07 3a90 	vmov	s15, r3
 8004ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bae:	4b59      	ldr	r3, [pc, #356]	@ (8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bc2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004d1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bde:	e043      	b.n	8004c68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	ee07 3a90 	vmov	s15, r3
 8004be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004d28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bf2:	4b48      	ldr	r3, [pc, #288]	@ (8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfa:	ee07 3a90 	vmov	s15, r3
 8004bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c06:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004d1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c22:	e021      	b.n	8004c68 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	ee07 3a90 	vmov	s15, r3
 8004c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c2e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c36:	4b37      	ldr	r3, [pc, #220]	@ (8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c3e:	ee07 3a90 	vmov	s15, r3
 8004c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c4a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004d1c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c66:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c68:	4b2a      	ldr	r3, [pc, #168]	@ (8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6c:	0a5b      	lsrs	r3, r3, #9
 8004c6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c72:	ee07 3a90 	vmov	s15, r3
 8004c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c82:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c8e:	ee17 2a90 	vmov	r2, s15
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004c96:	4b1f      	ldr	r3, [pc, #124]	@ (8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9a:	0c1b      	lsrs	r3, r3, #16
 8004c9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ca0:	ee07 3a90 	vmov	s15, r3
 8004ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cbc:	ee17 2a90 	vmov	r2, s15
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004cc4:	4b13      	ldr	r3, [pc, #76]	@ (8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc8:	0e1b      	lsrs	r3, r3, #24
 8004cca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cde:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ce2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cea:	ee17 2a90 	vmov	r2, s15
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004cf2:	e008      	b.n	8004d06 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	609a      	str	r2, [r3, #8]
}
 8004d06:	bf00      	nop
 8004d08:	3724      	adds	r7, #36	@ 0x24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	58024400 	.word	0x58024400
 8004d18:	03d09000 	.word	0x03d09000
 8004d1c:	46000000 	.word	0x46000000
 8004d20:	4c742400 	.word	0x4c742400
 8004d24:	4a742400 	.word	0x4a742400
 8004d28:	4af42400 	.word	0x4af42400

08004d2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d3a:	4b53      	ldr	r3, [pc, #332]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d101      	bne.n	8004d4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e099      	b.n	8004e7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d4a:	4b4f      	ldr	r3, [pc, #316]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a4e      	ldr	r2, [pc, #312]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004d50:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d56:	f7fc fa8f 	bl	8001278 <HAL_GetTick>
 8004d5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d5c:	e008      	b.n	8004d70 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d5e:	f7fc fa8b 	bl	8001278 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e086      	b.n	8004e7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d70:	4b45      	ldr	r3, [pc, #276]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1f0      	bne.n	8004d5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d7c:	4b42      	ldr	r3, [pc, #264]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d80:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	031b      	lsls	r3, r3, #12
 8004d8a:	493f      	ldr	r1, [pc, #252]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	025b      	lsls	r3, r3, #9
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	3b01      	subs	r3, #1
 8004dac:	041b      	lsls	r3, r3, #16
 8004dae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	3b01      	subs	r3, #1
 8004dba:	061b      	lsls	r3, r3, #24
 8004dbc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004dc0:	4931      	ldr	r1, [pc, #196]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004dc6:	4b30      	ldr	r3, [pc, #192]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	492d      	ldr	r1, [pc, #180]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ddc:	f023 0220 	bic.w	r2, r3, #32
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	4928      	ldr	r1, [pc, #160]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004dea:	4b27      	ldr	r3, [pc, #156]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dee:	4a26      	ldr	r2, [pc, #152]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004df0:	f023 0310 	bic.w	r3, r3, #16
 8004df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004df6:	4b24      	ldr	r3, [pc, #144]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004df8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dfa:	4b24      	ldr	r3, [pc, #144]	@ (8004e8c <RCCEx_PLL2_Config+0x160>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	69d2      	ldr	r2, [r2, #28]
 8004e02:	00d2      	lsls	r2, r2, #3
 8004e04:	4920      	ldr	r1, [pc, #128]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0e:	4a1e      	ldr	r2, [pc, #120]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004e10:	f043 0310 	orr.w	r3, r3, #16
 8004e14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d106      	bne.n	8004e2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e20:	4a19      	ldr	r2, [pc, #100]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004e22:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e28:	e00f      	b.n	8004e4a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d106      	bne.n	8004e3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e30:	4b15      	ldr	r3, [pc, #84]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e34:	4a14      	ldr	r2, [pc, #80]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004e36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e3c:	e005      	b.n	8004e4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e3e:	4b12      	ldr	r3, [pc, #72]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e42:	4a11      	ldr	r2, [pc, #68]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004e44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e48:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004e50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e56:	f7fc fa0f 	bl	8001278 <HAL_GetTick>
 8004e5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e5c:	e008      	b.n	8004e70 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e5e:	f7fc fa0b 	bl	8001278 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e006      	b.n	8004e7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e70:	4b05      	ldr	r3, [pc, #20]	@ (8004e88 <RCCEx_PLL2_Config+0x15c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0f0      	beq.n	8004e5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	58024400 	.word	0x58024400
 8004e8c:	ffff0007 	.word	0xffff0007

08004e90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e9e:	4b53      	ldr	r3, [pc, #332]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d101      	bne.n	8004eae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e099      	b.n	8004fe2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004eae:	4b4f      	ldr	r3, [pc, #316]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a4e      	ldr	r2, [pc, #312]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004eb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eba:	f7fc f9dd 	bl	8001278 <HAL_GetTick>
 8004ebe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ec0:	e008      	b.n	8004ed4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ec2:	f7fc f9d9 	bl	8001278 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e086      	b.n	8004fe2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ed4:	4b45      	ldr	r3, [pc, #276]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1f0      	bne.n	8004ec2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ee0:	4b42      	ldr	r3, [pc, #264]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	051b      	lsls	r3, r3, #20
 8004eee:	493f      	ldr	r1, [pc, #252]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	025b      	lsls	r3, r3, #9
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	041b      	lsls	r3, r3, #16
 8004f12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	061b      	lsls	r3, r3, #24
 8004f20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f24:	4931      	ldr	r1, [pc, #196]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f2a:	4b30      	ldr	r3, [pc, #192]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	492d      	ldr	r1, [pc, #180]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f40:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	4928      	ldr	r1, [pc, #160]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f4e:	4b27      	ldr	r3, [pc, #156]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f52:	4a26      	ldr	r2, [pc, #152]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004f54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f5a:	4b24      	ldr	r3, [pc, #144]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004f5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f5e:	4b24      	ldr	r3, [pc, #144]	@ (8004ff0 <RCCEx_PLL3_Config+0x160>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	69d2      	ldr	r2, [r2, #28]
 8004f66:	00d2      	lsls	r2, r2, #3
 8004f68:	4920      	ldr	r1, [pc, #128]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f6e:	4b1f      	ldr	r3, [pc, #124]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f72:	4a1e      	ldr	r2, [pc, #120]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d106      	bne.n	8004f8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f80:	4b1a      	ldr	r3, [pc, #104]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f84:	4a19      	ldr	r2, [pc, #100]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004f86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f8c:	e00f      	b.n	8004fae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d106      	bne.n	8004fa2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f94:	4b15      	ldr	r3, [pc, #84]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f98:	4a14      	ldr	r2, [pc, #80]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004f9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fa0:	e005      	b.n	8004fae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004fa2:	4b12      	ldr	r3, [pc, #72]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa6:	4a11      	ldr	r2, [pc, #68]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004fa8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004fae:	4b0f      	ldr	r3, [pc, #60]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a0e      	ldr	r2, [pc, #56]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fba:	f7fc f95d 	bl	8001278 <HAL_GetTick>
 8004fbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fc0:	e008      	b.n	8004fd4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fc2:	f7fc f959 	bl	8001278 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d901      	bls.n	8004fd4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e006      	b.n	8004fe2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fd4:	4b05      	ldr	r3, [pc, #20]	@ (8004fec <RCCEx_PLL3_Config+0x15c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0f0      	beq.n	8004fc2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	58024400 	.word	0x58024400
 8004ff0:	ffff0007 	.word	0xffff0007

08004ff4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e10f      	b.n	8005226 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a87      	ldr	r2, [pc, #540]	@ (8005230 <HAL_SPI_Init+0x23c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00f      	beq.n	8005036 <HAL_SPI_Init+0x42>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a86      	ldr	r2, [pc, #536]	@ (8005234 <HAL_SPI_Init+0x240>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d00a      	beq.n	8005036 <HAL_SPI_Init+0x42>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a84      	ldr	r2, [pc, #528]	@ (8005238 <HAL_SPI_Init+0x244>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d005      	beq.n	8005036 <HAL_SPI_Init+0x42>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	2b0f      	cmp	r3, #15
 8005030:	d901      	bls.n	8005036 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e0f7      	b.n	8005226 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f900 	bl	800523c <SPI_GetPacketSize>
 800503c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a7b      	ldr	r2, [pc, #492]	@ (8005230 <HAL_SPI_Init+0x23c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00c      	beq.n	8005062 <HAL_SPI_Init+0x6e>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a79      	ldr	r2, [pc, #484]	@ (8005234 <HAL_SPI_Init+0x240>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d007      	beq.n	8005062 <HAL_SPI_Init+0x6e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a78      	ldr	r2, [pc, #480]	@ (8005238 <HAL_SPI_Init+0x244>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d002      	beq.n	8005062 <HAL_SPI_Init+0x6e>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b08      	cmp	r3, #8
 8005060:	d811      	bhi.n	8005086 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005066:	4a72      	ldr	r2, [pc, #456]	@ (8005230 <HAL_SPI_Init+0x23c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d009      	beq.n	8005080 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a70      	ldr	r2, [pc, #448]	@ (8005234 <HAL_SPI_Init+0x240>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d004      	beq.n	8005080 <HAL_SPI_Init+0x8c>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a6f      	ldr	r2, [pc, #444]	@ (8005238 <HAL_SPI_Init+0x244>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d104      	bne.n	800508a <HAL_SPI_Init+0x96>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b10      	cmp	r3, #16
 8005084:	d901      	bls.n	800508a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e0cd      	b.n	8005226 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fb fe0e 	bl	8000cc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0201 	bic.w	r2, r2, #1
 80050ba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80050c6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050d0:	d119      	bne.n	8005106 <HAL_SPI_Init+0x112>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050da:	d103      	bne.n	80050e4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d008      	beq.n	80050f6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10c      	bne.n	8005106 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80050f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050f4:	d107      	bne.n	8005106 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005104:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00f      	beq.n	8005132 <HAL_SPI_Init+0x13e>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	2b06      	cmp	r3, #6
 8005118:	d90b      	bls.n	8005132 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	e007      	b.n	8005142 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005140:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	69da      	ldr	r2, [r3, #28]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514a:	431a      	orrs	r2, r3
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005154:	ea42 0103 	orr.w	r1, r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	431a      	orrs	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	431a      	orrs	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051a2:	ea42 0103 	orr.w	r1, r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d113      	bne.n	80051e2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051cc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80051e0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 0201 	bic.w	r2, r2, #1
 80051f0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40013000 	.word	0x40013000
 8005234:	40003800 	.word	0x40003800
 8005238:	40003c00 	.word	0x40003c00

0800523c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005248:	095b      	lsrs	r3, r3, #5
 800524a:	3301      	adds	r3, #1
 800524c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	3301      	adds	r3, #1
 8005254:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	3307      	adds	r3, #7
 800525a:	08db      	lsrs	r3, r3, #3
 800525c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	fb02 f303 	mul.w	r3, r2, r3
}
 8005266:	4618      	mov	r0, r3
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b082      	sub	sp, #8
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e042      	b.n	800530a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fb fda0 	bl	8000ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2224      	movs	r2, #36	@ 0x24
 80052a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0201 	bic.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fd91 	bl	8005de4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f826 	bl	8005314 <UART_SetConfig>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e01b      	b.n	800530a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f042 0201 	orr.w	r2, r2, #1
 8005300:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fe10 	bl	8005f28 <UART_CheckIdleState>
 8005308:	4603      	mov	r3, r0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005318:	b092      	sub	sp, #72	@ 0x48
 800531a:	af00      	add	r7, sp, #0
 800531c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	431a      	orrs	r2, r3
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	431a      	orrs	r2, r3
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	4313      	orrs	r3, r2
 800533a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	4bbe      	ldr	r3, [pc, #760]	@ (800563c <UART_SetConfig+0x328>)
 8005344:	4013      	ands	r3, r2
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	6812      	ldr	r2, [r2, #0]
 800534a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800534c:	430b      	orrs	r3, r1
 800534e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4ab3      	ldr	r2, [pc, #716]	@ (8005640 <UART_SetConfig+0x32c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d004      	beq.n	8005380 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800537c:	4313      	orrs	r3, r2
 800537e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	4baf      	ldr	r3, [pc, #700]	@ (8005644 <UART_SetConfig+0x330>)
 8005388:	4013      	ands	r3, r2
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	6812      	ldr	r2, [r2, #0]
 800538e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005390:	430b      	orrs	r3, r1
 8005392:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539a:	f023 010f 	bic.w	r1, r3, #15
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4aa6      	ldr	r2, [pc, #664]	@ (8005648 <UART_SetConfig+0x334>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d177      	bne.n	80054a4 <UART_SetConfig+0x190>
 80053b4:	4ba5      	ldr	r3, [pc, #660]	@ (800564c <UART_SetConfig+0x338>)
 80053b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053bc:	2b28      	cmp	r3, #40	@ 0x28
 80053be:	d86d      	bhi.n	800549c <UART_SetConfig+0x188>
 80053c0:	a201      	add	r2, pc, #4	@ (adr r2, 80053c8 <UART_SetConfig+0xb4>)
 80053c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c6:	bf00      	nop
 80053c8:	0800546d 	.word	0x0800546d
 80053cc:	0800549d 	.word	0x0800549d
 80053d0:	0800549d 	.word	0x0800549d
 80053d4:	0800549d 	.word	0x0800549d
 80053d8:	0800549d 	.word	0x0800549d
 80053dc:	0800549d 	.word	0x0800549d
 80053e0:	0800549d 	.word	0x0800549d
 80053e4:	0800549d 	.word	0x0800549d
 80053e8:	08005475 	.word	0x08005475
 80053ec:	0800549d 	.word	0x0800549d
 80053f0:	0800549d 	.word	0x0800549d
 80053f4:	0800549d 	.word	0x0800549d
 80053f8:	0800549d 	.word	0x0800549d
 80053fc:	0800549d 	.word	0x0800549d
 8005400:	0800549d 	.word	0x0800549d
 8005404:	0800549d 	.word	0x0800549d
 8005408:	0800547d 	.word	0x0800547d
 800540c:	0800549d 	.word	0x0800549d
 8005410:	0800549d 	.word	0x0800549d
 8005414:	0800549d 	.word	0x0800549d
 8005418:	0800549d 	.word	0x0800549d
 800541c:	0800549d 	.word	0x0800549d
 8005420:	0800549d 	.word	0x0800549d
 8005424:	0800549d 	.word	0x0800549d
 8005428:	08005485 	.word	0x08005485
 800542c:	0800549d 	.word	0x0800549d
 8005430:	0800549d 	.word	0x0800549d
 8005434:	0800549d 	.word	0x0800549d
 8005438:	0800549d 	.word	0x0800549d
 800543c:	0800549d 	.word	0x0800549d
 8005440:	0800549d 	.word	0x0800549d
 8005444:	0800549d 	.word	0x0800549d
 8005448:	0800548d 	.word	0x0800548d
 800544c:	0800549d 	.word	0x0800549d
 8005450:	0800549d 	.word	0x0800549d
 8005454:	0800549d 	.word	0x0800549d
 8005458:	0800549d 	.word	0x0800549d
 800545c:	0800549d 	.word	0x0800549d
 8005460:	0800549d 	.word	0x0800549d
 8005464:	0800549d 	.word	0x0800549d
 8005468:	08005495 	.word	0x08005495
 800546c:	2301      	movs	r3, #1
 800546e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005472:	e222      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005474:	2304      	movs	r3, #4
 8005476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800547a:	e21e      	b.n	80058ba <UART_SetConfig+0x5a6>
 800547c:	2308      	movs	r3, #8
 800547e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005482:	e21a      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005484:	2310      	movs	r3, #16
 8005486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800548a:	e216      	b.n	80058ba <UART_SetConfig+0x5a6>
 800548c:	2320      	movs	r3, #32
 800548e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005492:	e212      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005494:	2340      	movs	r3, #64	@ 0x40
 8005496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800549a:	e20e      	b.n	80058ba <UART_SetConfig+0x5a6>
 800549c:	2380      	movs	r3, #128	@ 0x80
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054a2:	e20a      	b.n	80058ba <UART_SetConfig+0x5a6>
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a69      	ldr	r2, [pc, #420]	@ (8005650 <UART_SetConfig+0x33c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d130      	bne.n	8005510 <UART_SetConfig+0x1fc>
 80054ae:	4b67      	ldr	r3, [pc, #412]	@ (800564c <UART_SetConfig+0x338>)
 80054b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	2b05      	cmp	r3, #5
 80054b8:	d826      	bhi.n	8005508 <UART_SetConfig+0x1f4>
 80054ba:	a201      	add	r2, pc, #4	@ (adr r2, 80054c0 <UART_SetConfig+0x1ac>)
 80054bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c0:	080054d9 	.word	0x080054d9
 80054c4:	080054e1 	.word	0x080054e1
 80054c8:	080054e9 	.word	0x080054e9
 80054cc:	080054f1 	.word	0x080054f1
 80054d0:	080054f9 	.word	0x080054f9
 80054d4:	08005501 	.word	0x08005501
 80054d8:	2300      	movs	r3, #0
 80054da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054de:	e1ec      	b.n	80058ba <UART_SetConfig+0x5a6>
 80054e0:	2304      	movs	r3, #4
 80054e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054e6:	e1e8      	b.n	80058ba <UART_SetConfig+0x5a6>
 80054e8:	2308      	movs	r3, #8
 80054ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ee:	e1e4      	b.n	80058ba <UART_SetConfig+0x5a6>
 80054f0:	2310      	movs	r3, #16
 80054f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054f6:	e1e0      	b.n	80058ba <UART_SetConfig+0x5a6>
 80054f8:	2320      	movs	r3, #32
 80054fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054fe:	e1dc      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005500:	2340      	movs	r3, #64	@ 0x40
 8005502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005506:	e1d8      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005508:	2380      	movs	r3, #128	@ 0x80
 800550a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800550e:	e1d4      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a4f      	ldr	r2, [pc, #316]	@ (8005654 <UART_SetConfig+0x340>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d130      	bne.n	800557c <UART_SetConfig+0x268>
 800551a:	4b4c      	ldr	r3, [pc, #304]	@ (800564c <UART_SetConfig+0x338>)
 800551c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800551e:	f003 0307 	and.w	r3, r3, #7
 8005522:	2b05      	cmp	r3, #5
 8005524:	d826      	bhi.n	8005574 <UART_SetConfig+0x260>
 8005526:	a201      	add	r2, pc, #4	@ (adr r2, 800552c <UART_SetConfig+0x218>)
 8005528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552c:	08005545 	.word	0x08005545
 8005530:	0800554d 	.word	0x0800554d
 8005534:	08005555 	.word	0x08005555
 8005538:	0800555d 	.word	0x0800555d
 800553c:	08005565 	.word	0x08005565
 8005540:	0800556d 	.word	0x0800556d
 8005544:	2300      	movs	r3, #0
 8005546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800554a:	e1b6      	b.n	80058ba <UART_SetConfig+0x5a6>
 800554c:	2304      	movs	r3, #4
 800554e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005552:	e1b2      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005554:	2308      	movs	r3, #8
 8005556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800555a:	e1ae      	b.n	80058ba <UART_SetConfig+0x5a6>
 800555c:	2310      	movs	r3, #16
 800555e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005562:	e1aa      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005564:	2320      	movs	r3, #32
 8005566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800556a:	e1a6      	b.n	80058ba <UART_SetConfig+0x5a6>
 800556c:	2340      	movs	r3, #64	@ 0x40
 800556e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005572:	e1a2      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005574:	2380      	movs	r3, #128	@ 0x80
 8005576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800557a:	e19e      	b.n	80058ba <UART_SetConfig+0x5a6>
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a35      	ldr	r2, [pc, #212]	@ (8005658 <UART_SetConfig+0x344>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d130      	bne.n	80055e8 <UART_SetConfig+0x2d4>
 8005586:	4b31      	ldr	r3, [pc, #196]	@ (800564c <UART_SetConfig+0x338>)
 8005588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	2b05      	cmp	r3, #5
 8005590:	d826      	bhi.n	80055e0 <UART_SetConfig+0x2cc>
 8005592:	a201      	add	r2, pc, #4	@ (adr r2, 8005598 <UART_SetConfig+0x284>)
 8005594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005598:	080055b1 	.word	0x080055b1
 800559c:	080055b9 	.word	0x080055b9
 80055a0:	080055c1 	.word	0x080055c1
 80055a4:	080055c9 	.word	0x080055c9
 80055a8:	080055d1 	.word	0x080055d1
 80055ac:	080055d9 	.word	0x080055d9
 80055b0:	2300      	movs	r3, #0
 80055b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055b6:	e180      	b.n	80058ba <UART_SetConfig+0x5a6>
 80055b8:	2304      	movs	r3, #4
 80055ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055be:	e17c      	b.n	80058ba <UART_SetConfig+0x5a6>
 80055c0:	2308      	movs	r3, #8
 80055c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055c6:	e178      	b.n	80058ba <UART_SetConfig+0x5a6>
 80055c8:	2310      	movs	r3, #16
 80055ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ce:	e174      	b.n	80058ba <UART_SetConfig+0x5a6>
 80055d0:	2320      	movs	r3, #32
 80055d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055d6:	e170      	b.n	80058ba <UART_SetConfig+0x5a6>
 80055d8:	2340      	movs	r3, #64	@ 0x40
 80055da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055de:	e16c      	b.n	80058ba <UART_SetConfig+0x5a6>
 80055e0:	2380      	movs	r3, #128	@ 0x80
 80055e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055e6:	e168      	b.n	80058ba <UART_SetConfig+0x5a6>
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a1b      	ldr	r2, [pc, #108]	@ (800565c <UART_SetConfig+0x348>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d142      	bne.n	8005678 <UART_SetConfig+0x364>
 80055f2:	4b16      	ldr	r3, [pc, #88]	@ (800564c <UART_SetConfig+0x338>)
 80055f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	2b05      	cmp	r3, #5
 80055fc:	d838      	bhi.n	8005670 <UART_SetConfig+0x35c>
 80055fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005604 <UART_SetConfig+0x2f0>)
 8005600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005604:	0800561d 	.word	0x0800561d
 8005608:	08005625 	.word	0x08005625
 800560c:	0800562d 	.word	0x0800562d
 8005610:	08005635 	.word	0x08005635
 8005614:	08005661 	.word	0x08005661
 8005618:	08005669 	.word	0x08005669
 800561c:	2300      	movs	r3, #0
 800561e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005622:	e14a      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005624:	2304      	movs	r3, #4
 8005626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800562a:	e146      	b.n	80058ba <UART_SetConfig+0x5a6>
 800562c:	2308      	movs	r3, #8
 800562e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005632:	e142      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005634:	2310      	movs	r3, #16
 8005636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800563a:	e13e      	b.n	80058ba <UART_SetConfig+0x5a6>
 800563c:	cfff69f3 	.word	0xcfff69f3
 8005640:	58000c00 	.word	0x58000c00
 8005644:	11fff4ff 	.word	0x11fff4ff
 8005648:	40011000 	.word	0x40011000
 800564c:	58024400 	.word	0x58024400
 8005650:	40004400 	.word	0x40004400
 8005654:	40004800 	.word	0x40004800
 8005658:	40004c00 	.word	0x40004c00
 800565c:	40005000 	.word	0x40005000
 8005660:	2320      	movs	r3, #32
 8005662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005666:	e128      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005668:	2340      	movs	r3, #64	@ 0x40
 800566a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800566e:	e124      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005670:	2380      	movs	r3, #128	@ 0x80
 8005672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005676:	e120      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4acb      	ldr	r2, [pc, #812]	@ (80059ac <UART_SetConfig+0x698>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d176      	bne.n	8005770 <UART_SetConfig+0x45c>
 8005682:	4bcb      	ldr	r3, [pc, #812]	@ (80059b0 <UART_SetConfig+0x69c>)
 8005684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005686:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800568a:	2b28      	cmp	r3, #40	@ 0x28
 800568c:	d86c      	bhi.n	8005768 <UART_SetConfig+0x454>
 800568e:	a201      	add	r2, pc, #4	@ (adr r2, 8005694 <UART_SetConfig+0x380>)
 8005690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005694:	08005739 	.word	0x08005739
 8005698:	08005769 	.word	0x08005769
 800569c:	08005769 	.word	0x08005769
 80056a0:	08005769 	.word	0x08005769
 80056a4:	08005769 	.word	0x08005769
 80056a8:	08005769 	.word	0x08005769
 80056ac:	08005769 	.word	0x08005769
 80056b0:	08005769 	.word	0x08005769
 80056b4:	08005741 	.word	0x08005741
 80056b8:	08005769 	.word	0x08005769
 80056bc:	08005769 	.word	0x08005769
 80056c0:	08005769 	.word	0x08005769
 80056c4:	08005769 	.word	0x08005769
 80056c8:	08005769 	.word	0x08005769
 80056cc:	08005769 	.word	0x08005769
 80056d0:	08005769 	.word	0x08005769
 80056d4:	08005749 	.word	0x08005749
 80056d8:	08005769 	.word	0x08005769
 80056dc:	08005769 	.word	0x08005769
 80056e0:	08005769 	.word	0x08005769
 80056e4:	08005769 	.word	0x08005769
 80056e8:	08005769 	.word	0x08005769
 80056ec:	08005769 	.word	0x08005769
 80056f0:	08005769 	.word	0x08005769
 80056f4:	08005751 	.word	0x08005751
 80056f8:	08005769 	.word	0x08005769
 80056fc:	08005769 	.word	0x08005769
 8005700:	08005769 	.word	0x08005769
 8005704:	08005769 	.word	0x08005769
 8005708:	08005769 	.word	0x08005769
 800570c:	08005769 	.word	0x08005769
 8005710:	08005769 	.word	0x08005769
 8005714:	08005759 	.word	0x08005759
 8005718:	08005769 	.word	0x08005769
 800571c:	08005769 	.word	0x08005769
 8005720:	08005769 	.word	0x08005769
 8005724:	08005769 	.word	0x08005769
 8005728:	08005769 	.word	0x08005769
 800572c:	08005769 	.word	0x08005769
 8005730:	08005769 	.word	0x08005769
 8005734:	08005761 	.word	0x08005761
 8005738:	2301      	movs	r3, #1
 800573a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800573e:	e0bc      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005740:	2304      	movs	r3, #4
 8005742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005746:	e0b8      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005748:	2308      	movs	r3, #8
 800574a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800574e:	e0b4      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005750:	2310      	movs	r3, #16
 8005752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005756:	e0b0      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005758:	2320      	movs	r3, #32
 800575a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800575e:	e0ac      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005760:	2340      	movs	r3, #64	@ 0x40
 8005762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005766:	e0a8      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005768:	2380      	movs	r3, #128	@ 0x80
 800576a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800576e:	e0a4      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a8f      	ldr	r2, [pc, #572]	@ (80059b4 <UART_SetConfig+0x6a0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d130      	bne.n	80057dc <UART_SetConfig+0x4c8>
 800577a:	4b8d      	ldr	r3, [pc, #564]	@ (80059b0 <UART_SetConfig+0x69c>)
 800577c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800577e:	f003 0307 	and.w	r3, r3, #7
 8005782:	2b05      	cmp	r3, #5
 8005784:	d826      	bhi.n	80057d4 <UART_SetConfig+0x4c0>
 8005786:	a201      	add	r2, pc, #4	@ (adr r2, 800578c <UART_SetConfig+0x478>)
 8005788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578c:	080057a5 	.word	0x080057a5
 8005790:	080057ad 	.word	0x080057ad
 8005794:	080057b5 	.word	0x080057b5
 8005798:	080057bd 	.word	0x080057bd
 800579c:	080057c5 	.word	0x080057c5
 80057a0:	080057cd 	.word	0x080057cd
 80057a4:	2300      	movs	r3, #0
 80057a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057aa:	e086      	b.n	80058ba <UART_SetConfig+0x5a6>
 80057ac:	2304      	movs	r3, #4
 80057ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057b2:	e082      	b.n	80058ba <UART_SetConfig+0x5a6>
 80057b4:	2308      	movs	r3, #8
 80057b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ba:	e07e      	b.n	80058ba <UART_SetConfig+0x5a6>
 80057bc:	2310      	movs	r3, #16
 80057be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057c2:	e07a      	b.n	80058ba <UART_SetConfig+0x5a6>
 80057c4:	2320      	movs	r3, #32
 80057c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ca:	e076      	b.n	80058ba <UART_SetConfig+0x5a6>
 80057cc:	2340      	movs	r3, #64	@ 0x40
 80057ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057d2:	e072      	b.n	80058ba <UART_SetConfig+0x5a6>
 80057d4:	2380      	movs	r3, #128	@ 0x80
 80057d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057da:	e06e      	b.n	80058ba <UART_SetConfig+0x5a6>
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a75      	ldr	r2, [pc, #468]	@ (80059b8 <UART_SetConfig+0x6a4>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d130      	bne.n	8005848 <UART_SetConfig+0x534>
 80057e6:	4b72      	ldr	r3, [pc, #456]	@ (80059b0 <UART_SetConfig+0x69c>)
 80057e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	2b05      	cmp	r3, #5
 80057f0:	d826      	bhi.n	8005840 <UART_SetConfig+0x52c>
 80057f2:	a201      	add	r2, pc, #4	@ (adr r2, 80057f8 <UART_SetConfig+0x4e4>)
 80057f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f8:	08005811 	.word	0x08005811
 80057fc:	08005819 	.word	0x08005819
 8005800:	08005821 	.word	0x08005821
 8005804:	08005829 	.word	0x08005829
 8005808:	08005831 	.word	0x08005831
 800580c:	08005839 	.word	0x08005839
 8005810:	2300      	movs	r3, #0
 8005812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005816:	e050      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005818:	2304      	movs	r3, #4
 800581a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800581e:	e04c      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005820:	2308      	movs	r3, #8
 8005822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005826:	e048      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005828:	2310      	movs	r3, #16
 800582a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800582e:	e044      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005830:	2320      	movs	r3, #32
 8005832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005836:	e040      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005838:	2340      	movs	r3, #64	@ 0x40
 800583a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800583e:	e03c      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005840:	2380      	movs	r3, #128	@ 0x80
 8005842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005846:	e038      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a5b      	ldr	r2, [pc, #364]	@ (80059bc <UART_SetConfig+0x6a8>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d130      	bne.n	80058b4 <UART_SetConfig+0x5a0>
 8005852:	4b57      	ldr	r3, [pc, #348]	@ (80059b0 <UART_SetConfig+0x69c>)
 8005854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	2b05      	cmp	r3, #5
 800585c:	d826      	bhi.n	80058ac <UART_SetConfig+0x598>
 800585e:	a201      	add	r2, pc, #4	@ (adr r2, 8005864 <UART_SetConfig+0x550>)
 8005860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005864:	0800587d 	.word	0x0800587d
 8005868:	08005885 	.word	0x08005885
 800586c:	0800588d 	.word	0x0800588d
 8005870:	08005895 	.word	0x08005895
 8005874:	0800589d 	.word	0x0800589d
 8005878:	080058a5 	.word	0x080058a5
 800587c:	2302      	movs	r3, #2
 800587e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005882:	e01a      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005884:	2304      	movs	r3, #4
 8005886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800588a:	e016      	b.n	80058ba <UART_SetConfig+0x5a6>
 800588c:	2308      	movs	r3, #8
 800588e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005892:	e012      	b.n	80058ba <UART_SetConfig+0x5a6>
 8005894:	2310      	movs	r3, #16
 8005896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800589a:	e00e      	b.n	80058ba <UART_SetConfig+0x5a6>
 800589c:	2320      	movs	r3, #32
 800589e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058a2:	e00a      	b.n	80058ba <UART_SetConfig+0x5a6>
 80058a4:	2340      	movs	r3, #64	@ 0x40
 80058a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058aa:	e006      	b.n	80058ba <UART_SetConfig+0x5a6>
 80058ac:	2380      	movs	r3, #128	@ 0x80
 80058ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058b2:	e002      	b.n	80058ba <UART_SetConfig+0x5a6>
 80058b4:	2380      	movs	r3, #128	@ 0x80
 80058b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a3f      	ldr	r2, [pc, #252]	@ (80059bc <UART_SetConfig+0x6a8>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	f040 80f8 	bne.w	8005ab6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80058ca:	2b20      	cmp	r3, #32
 80058cc:	dc46      	bgt.n	800595c <UART_SetConfig+0x648>
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	f2c0 8082 	blt.w	80059d8 <UART_SetConfig+0x6c4>
 80058d4:	3b02      	subs	r3, #2
 80058d6:	2b1e      	cmp	r3, #30
 80058d8:	d87e      	bhi.n	80059d8 <UART_SetConfig+0x6c4>
 80058da:	a201      	add	r2, pc, #4	@ (adr r2, 80058e0 <UART_SetConfig+0x5cc>)
 80058dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e0:	08005963 	.word	0x08005963
 80058e4:	080059d9 	.word	0x080059d9
 80058e8:	0800596b 	.word	0x0800596b
 80058ec:	080059d9 	.word	0x080059d9
 80058f0:	080059d9 	.word	0x080059d9
 80058f4:	080059d9 	.word	0x080059d9
 80058f8:	0800597b 	.word	0x0800597b
 80058fc:	080059d9 	.word	0x080059d9
 8005900:	080059d9 	.word	0x080059d9
 8005904:	080059d9 	.word	0x080059d9
 8005908:	080059d9 	.word	0x080059d9
 800590c:	080059d9 	.word	0x080059d9
 8005910:	080059d9 	.word	0x080059d9
 8005914:	080059d9 	.word	0x080059d9
 8005918:	0800598b 	.word	0x0800598b
 800591c:	080059d9 	.word	0x080059d9
 8005920:	080059d9 	.word	0x080059d9
 8005924:	080059d9 	.word	0x080059d9
 8005928:	080059d9 	.word	0x080059d9
 800592c:	080059d9 	.word	0x080059d9
 8005930:	080059d9 	.word	0x080059d9
 8005934:	080059d9 	.word	0x080059d9
 8005938:	080059d9 	.word	0x080059d9
 800593c:	080059d9 	.word	0x080059d9
 8005940:	080059d9 	.word	0x080059d9
 8005944:	080059d9 	.word	0x080059d9
 8005948:	080059d9 	.word	0x080059d9
 800594c:	080059d9 	.word	0x080059d9
 8005950:	080059d9 	.word	0x080059d9
 8005954:	080059d9 	.word	0x080059d9
 8005958:	080059cb 	.word	0x080059cb
 800595c:	2b40      	cmp	r3, #64	@ 0x40
 800595e:	d037      	beq.n	80059d0 <UART_SetConfig+0x6bc>
 8005960:	e03a      	b.n	80059d8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005962:	f7fe ff25 	bl	80047b0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005966:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005968:	e03c      	b.n	80059e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800596a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800596e:	4618      	mov	r0, r3
 8005970:	f7fe ff34 	bl	80047dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005978:	e034      	b.n	80059e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800597a:	f107 0318 	add.w	r3, r7, #24
 800597e:	4618      	mov	r0, r3
 8005980:	f7ff f880 	bl	8004a84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005988:	e02c      	b.n	80059e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800598a:	4b09      	ldr	r3, [pc, #36]	@ (80059b0 <UART_SetConfig+0x69c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b00      	cmp	r3, #0
 8005994:	d016      	beq.n	80059c4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005996:	4b06      	ldr	r3, [pc, #24]	@ (80059b0 <UART_SetConfig+0x69c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	08db      	lsrs	r3, r3, #3
 800599c:	f003 0303 	and.w	r3, r3, #3
 80059a0:	4a07      	ldr	r2, [pc, #28]	@ (80059c0 <UART_SetConfig+0x6ac>)
 80059a2:	fa22 f303 	lsr.w	r3, r2, r3
 80059a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059a8:	e01c      	b.n	80059e4 <UART_SetConfig+0x6d0>
 80059aa:	bf00      	nop
 80059ac:	40011400 	.word	0x40011400
 80059b0:	58024400 	.word	0x58024400
 80059b4:	40007800 	.word	0x40007800
 80059b8:	40007c00 	.word	0x40007c00
 80059bc:	58000c00 	.word	0x58000c00
 80059c0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80059c4:	4b9d      	ldr	r3, [pc, #628]	@ (8005c3c <UART_SetConfig+0x928>)
 80059c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059c8:	e00c      	b.n	80059e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059ca:	4b9d      	ldr	r3, [pc, #628]	@ (8005c40 <UART_SetConfig+0x92c>)
 80059cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059ce:	e009      	b.n	80059e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059d6:	e005      	b.n	80059e4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80059e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 81de 	beq.w	8005da8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f0:	4a94      	ldr	r2, [pc, #592]	@ (8005c44 <UART_SetConfig+0x930>)
 80059f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059f6:	461a      	mov	r2, r3
 80059f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80059fe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	4613      	mov	r3, r2
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	4413      	add	r3, r2
 8005a0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d305      	bcc.n	8005a1c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d903      	bls.n	8005a24 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005a22:	e1c1      	b.n	8005da8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a26:	2200      	movs	r2, #0
 8005a28:	60bb      	str	r3, [r7, #8]
 8005a2a:	60fa      	str	r2, [r7, #12]
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a30:	4a84      	ldr	r2, [pc, #528]	@ (8005c44 <UART_SetConfig+0x930>)
 8005a32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	2200      	movs	r2, #0
 8005a3a:	603b      	str	r3, [r7, #0]
 8005a3c:	607a      	str	r2, [r7, #4]
 8005a3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a46:	f7fa fc47 	bl	80002d8 <__aeabi_uldivmod>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4610      	mov	r0, r2
 8005a50:	4619      	mov	r1, r3
 8005a52:	f04f 0200 	mov.w	r2, #0
 8005a56:	f04f 0300 	mov.w	r3, #0
 8005a5a:	020b      	lsls	r3, r1, #8
 8005a5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a60:	0202      	lsls	r2, r0, #8
 8005a62:	6979      	ldr	r1, [r7, #20]
 8005a64:	6849      	ldr	r1, [r1, #4]
 8005a66:	0849      	lsrs	r1, r1, #1
 8005a68:	2000      	movs	r0, #0
 8005a6a:	460c      	mov	r4, r1
 8005a6c:	4605      	mov	r5, r0
 8005a6e:	eb12 0804 	adds.w	r8, r2, r4
 8005a72:	eb43 0905 	adc.w	r9, r3, r5
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	469a      	mov	sl, r3
 8005a7e:	4693      	mov	fp, r2
 8005a80:	4652      	mov	r2, sl
 8005a82:	465b      	mov	r3, fp
 8005a84:	4640      	mov	r0, r8
 8005a86:	4649      	mov	r1, r9
 8005a88:	f7fa fc26 	bl	80002d8 <__aeabi_uldivmod>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4613      	mov	r3, r2
 8005a92:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a9a:	d308      	bcc.n	8005aae <UART_SetConfig+0x79a>
 8005a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aa2:	d204      	bcs.n	8005aae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005aaa:	60da      	str	r2, [r3, #12]
 8005aac:	e17c      	b.n	8005da8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005ab4:	e178      	b.n	8005da8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005abe:	f040 80c5 	bne.w	8005c4c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005ac2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005ac6:	2b20      	cmp	r3, #32
 8005ac8:	dc48      	bgt.n	8005b5c <UART_SetConfig+0x848>
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	db7b      	blt.n	8005bc6 <UART_SetConfig+0x8b2>
 8005ace:	2b20      	cmp	r3, #32
 8005ad0:	d879      	bhi.n	8005bc6 <UART_SetConfig+0x8b2>
 8005ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad8 <UART_SetConfig+0x7c4>)
 8005ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad8:	08005b63 	.word	0x08005b63
 8005adc:	08005b6b 	.word	0x08005b6b
 8005ae0:	08005bc7 	.word	0x08005bc7
 8005ae4:	08005bc7 	.word	0x08005bc7
 8005ae8:	08005b73 	.word	0x08005b73
 8005aec:	08005bc7 	.word	0x08005bc7
 8005af0:	08005bc7 	.word	0x08005bc7
 8005af4:	08005bc7 	.word	0x08005bc7
 8005af8:	08005b83 	.word	0x08005b83
 8005afc:	08005bc7 	.word	0x08005bc7
 8005b00:	08005bc7 	.word	0x08005bc7
 8005b04:	08005bc7 	.word	0x08005bc7
 8005b08:	08005bc7 	.word	0x08005bc7
 8005b0c:	08005bc7 	.word	0x08005bc7
 8005b10:	08005bc7 	.word	0x08005bc7
 8005b14:	08005bc7 	.word	0x08005bc7
 8005b18:	08005b93 	.word	0x08005b93
 8005b1c:	08005bc7 	.word	0x08005bc7
 8005b20:	08005bc7 	.word	0x08005bc7
 8005b24:	08005bc7 	.word	0x08005bc7
 8005b28:	08005bc7 	.word	0x08005bc7
 8005b2c:	08005bc7 	.word	0x08005bc7
 8005b30:	08005bc7 	.word	0x08005bc7
 8005b34:	08005bc7 	.word	0x08005bc7
 8005b38:	08005bc7 	.word	0x08005bc7
 8005b3c:	08005bc7 	.word	0x08005bc7
 8005b40:	08005bc7 	.word	0x08005bc7
 8005b44:	08005bc7 	.word	0x08005bc7
 8005b48:	08005bc7 	.word	0x08005bc7
 8005b4c:	08005bc7 	.word	0x08005bc7
 8005b50:	08005bc7 	.word	0x08005bc7
 8005b54:	08005bc7 	.word	0x08005bc7
 8005b58:	08005bb9 	.word	0x08005bb9
 8005b5c:	2b40      	cmp	r3, #64	@ 0x40
 8005b5e:	d02e      	beq.n	8005bbe <UART_SetConfig+0x8aa>
 8005b60:	e031      	b.n	8005bc6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b62:	f7fd fbef 	bl	8003344 <HAL_RCC_GetPCLK1Freq>
 8005b66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b68:	e033      	b.n	8005bd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b6a:	f7fd fc01 	bl	8003370 <HAL_RCC_GetPCLK2Freq>
 8005b6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b70:	e02f      	b.n	8005bd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7fe fe30 	bl	80047dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b80:	e027      	b.n	8005bd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b82:	f107 0318 	add.w	r3, r7, #24
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fe ff7c 	bl	8004a84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b90:	e01f      	b.n	8005bd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b92:	4b2d      	ldr	r3, [pc, #180]	@ (8005c48 <UART_SetConfig+0x934>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0320 	and.w	r3, r3, #32
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d009      	beq.n	8005bb2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8005c48 <UART_SetConfig+0x934>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	08db      	lsrs	r3, r3, #3
 8005ba4:	f003 0303 	and.w	r3, r3, #3
 8005ba8:	4a24      	ldr	r2, [pc, #144]	@ (8005c3c <UART_SetConfig+0x928>)
 8005baa:	fa22 f303 	lsr.w	r3, r2, r3
 8005bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005bb0:	e00f      	b.n	8005bd2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005bb2:	4b22      	ldr	r3, [pc, #136]	@ (8005c3c <UART_SetConfig+0x928>)
 8005bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bb6:	e00c      	b.n	8005bd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005bb8:	4b21      	ldr	r3, [pc, #132]	@ (8005c40 <UART_SetConfig+0x92c>)
 8005bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bbc:	e009      	b.n	8005bd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bc4:	e005      	b.n	8005bd2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005bd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 80e7 	beq.w	8005da8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bde:	4a19      	ldr	r2, [pc, #100]	@ (8005c44 <UART_SetConfig+0x930>)
 8005be0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005be4:	461a      	mov	r2, r3
 8005be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005be8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bec:	005a      	lsls	r2, r3, #1
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	085b      	lsrs	r3, r3, #1
 8005bf4:	441a      	add	r2, r3
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c02:	2b0f      	cmp	r3, #15
 8005c04:	d916      	bls.n	8005c34 <UART_SetConfig+0x920>
 8005c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c0c:	d212      	bcs.n	8005c34 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	f023 030f 	bic.w	r3, r3, #15
 8005c16:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c1a:	085b      	lsrs	r3, r3, #1
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c26:	4313      	orrs	r3, r2
 8005c28:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005c30:	60da      	str	r2, [r3, #12]
 8005c32:	e0b9      	b.n	8005da8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005c3a:	e0b5      	b.n	8005da8 <UART_SetConfig+0xa94>
 8005c3c:	03d09000 	.word	0x03d09000
 8005c40:	003d0900 	.word	0x003d0900
 8005c44:	08006abc 	.word	0x08006abc
 8005c48:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c4c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005c50:	2b20      	cmp	r3, #32
 8005c52:	dc49      	bgt.n	8005ce8 <UART_SetConfig+0x9d4>
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	db7c      	blt.n	8005d52 <UART_SetConfig+0xa3e>
 8005c58:	2b20      	cmp	r3, #32
 8005c5a:	d87a      	bhi.n	8005d52 <UART_SetConfig+0xa3e>
 8005c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c64 <UART_SetConfig+0x950>)
 8005c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c62:	bf00      	nop
 8005c64:	08005cef 	.word	0x08005cef
 8005c68:	08005cf7 	.word	0x08005cf7
 8005c6c:	08005d53 	.word	0x08005d53
 8005c70:	08005d53 	.word	0x08005d53
 8005c74:	08005cff 	.word	0x08005cff
 8005c78:	08005d53 	.word	0x08005d53
 8005c7c:	08005d53 	.word	0x08005d53
 8005c80:	08005d53 	.word	0x08005d53
 8005c84:	08005d0f 	.word	0x08005d0f
 8005c88:	08005d53 	.word	0x08005d53
 8005c8c:	08005d53 	.word	0x08005d53
 8005c90:	08005d53 	.word	0x08005d53
 8005c94:	08005d53 	.word	0x08005d53
 8005c98:	08005d53 	.word	0x08005d53
 8005c9c:	08005d53 	.word	0x08005d53
 8005ca0:	08005d53 	.word	0x08005d53
 8005ca4:	08005d1f 	.word	0x08005d1f
 8005ca8:	08005d53 	.word	0x08005d53
 8005cac:	08005d53 	.word	0x08005d53
 8005cb0:	08005d53 	.word	0x08005d53
 8005cb4:	08005d53 	.word	0x08005d53
 8005cb8:	08005d53 	.word	0x08005d53
 8005cbc:	08005d53 	.word	0x08005d53
 8005cc0:	08005d53 	.word	0x08005d53
 8005cc4:	08005d53 	.word	0x08005d53
 8005cc8:	08005d53 	.word	0x08005d53
 8005ccc:	08005d53 	.word	0x08005d53
 8005cd0:	08005d53 	.word	0x08005d53
 8005cd4:	08005d53 	.word	0x08005d53
 8005cd8:	08005d53 	.word	0x08005d53
 8005cdc:	08005d53 	.word	0x08005d53
 8005ce0:	08005d53 	.word	0x08005d53
 8005ce4:	08005d45 	.word	0x08005d45
 8005ce8:	2b40      	cmp	r3, #64	@ 0x40
 8005cea:	d02e      	beq.n	8005d4a <UART_SetConfig+0xa36>
 8005cec:	e031      	b.n	8005d52 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cee:	f7fd fb29 	bl	8003344 <HAL_RCC_GetPCLK1Freq>
 8005cf2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005cf4:	e033      	b.n	8005d5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cf6:	f7fd fb3b 	bl	8003370 <HAL_RCC_GetPCLK2Freq>
 8005cfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005cfc:	e02f      	b.n	8005d5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fe fd6a 	bl	80047dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d0c:	e027      	b.n	8005d5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d0e:	f107 0318 	add.w	r3, r7, #24
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fe feb6 	bl	8004a84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d1c:	e01f      	b.n	8005d5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8005dd4 <UART_SetConfig+0xac0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0320 	and.w	r3, r3, #32
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d009      	beq.n	8005d3e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8005dd4 <UART_SetConfig+0xac0>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	08db      	lsrs	r3, r3, #3
 8005d30:	f003 0303 	and.w	r3, r3, #3
 8005d34:	4a28      	ldr	r2, [pc, #160]	@ (8005dd8 <UART_SetConfig+0xac4>)
 8005d36:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d3c:	e00f      	b.n	8005d5e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005d3e:	4b26      	ldr	r3, [pc, #152]	@ (8005dd8 <UART_SetConfig+0xac4>)
 8005d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d42:	e00c      	b.n	8005d5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d44:	4b25      	ldr	r3, [pc, #148]	@ (8005ddc <UART_SetConfig+0xac8>)
 8005d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d48:	e009      	b.n	8005d5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d50:	e005      	b.n	8005d5e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005d5c:	bf00      	nop
    }

    if (pclk != 0U)
 8005d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d021      	beq.n	8005da8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d68:	4a1d      	ldr	r2, [pc, #116]	@ (8005de0 <UART_SetConfig+0xacc>)
 8005d6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d72:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	085b      	lsrs	r3, r3, #1
 8005d7c:	441a      	add	r2, r3
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d86:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8a:	2b0f      	cmp	r3, #15
 8005d8c:	d909      	bls.n	8005da2 <UART_SetConfig+0xa8e>
 8005d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d94:	d205      	bcs.n	8005da2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	60da      	str	r2, [r3, #12]
 8005da0:	e002      	b.n	8005da8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005dc4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3748      	adds	r7, #72	@ 0x48
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dd2:	bf00      	nop
 8005dd4:	58024400 	.word	0x58024400
 8005dd8:	03d09000 	.word	0x03d09000
 8005ddc:	003d0900 	.word	0x003d0900
 8005de0:	08006abc 	.word	0x08006abc

08005de4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df0:	f003 0308 	and.w	r3, r3, #8
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00a      	beq.n	8005e0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00a      	beq.n	8005e52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e56:	f003 0304 	and.w	r3, r3, #4
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00a      	beq.n	8005e74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e78:	f003 0310 	and.w	r3, r3, #16
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00a      	beq.n	8005e96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9a:	f003 0320 	and.w	r3, r3, #32
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00a      	beq.n	8005eb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01a      	beq.n	8005efa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ede:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ee2:	d10a      	bne.n	8005efa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	605a      	str	r2, [r3, #4]
  }
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b098      	sub	sp, #96	@ 0x60
 8005f2c:	af02      	add	r7, sp, #8
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f38:	f7fb f99e 	bl	8001278 <HAL_GetTick>
 8005f3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0308 	and.w	r3, r3, #8
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d12f      	bne.n	8005fac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f54:	2200      	movs	r2, #0
 8005f56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f88e 	bl	800607c <UART_WaitOnFlagUntilTimeout>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d022      	beq.n	8005fac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f6e:	e853 3f00 	ldrex	r3, [r3]
 8005f72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	461a      	mov	r2, r3
 8005f82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f84:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f86:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f8c:	e841 2300 	strex	r3, r2, [r1]
 8005f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1e6      	bne.n	8005f66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e063      	b.n	8006074 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0304 	and.w	r3, r3, #4
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d149      	bne.n	800604e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f857 	bl	800607c <UART_WaitOnFlagUntilTimeout>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d03c      	beq.n	800604e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fdc:	e853 3f00 	ldrex	r3, [r3]
 8005fe0:	623b      	str	r3, [r7, #32]
   return(result);
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ff2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ff4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ff8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e6      	bne.n	8005fd4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3308      	adds	r3, #8
 800600c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	e853 3f00 	ldrex	r3, [r3]
 8006014:	60fb      	str	r3, [r7, #12]
   return(result);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f023 0301 	bic.w	r3, r3, #1
 800601c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3308      	adds	r3, #8
 8006024:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006026:	61fa      	str	r2, [r7, #28]
 8006028:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	69b9      	ldr	r1, [r7, #24]
 800602c:	69fa      	ldr	r2, [r7, #28]
 800602e:	e841 2300 	strex	r3, r2, [r1]
 8006032:	617b      	str	r3, [r7, #20]
   return(result);
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1e5      	bne.n	8006006 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2220      	movs	r2, #32
 800603e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e012      	b.n	8006074 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2220      	movs	r2, #32
 8006052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2220      	movs	r2, #32
 800605a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3758      	adds	r7, #88	@ 0x58
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	4613      	mov	r3, r2
 800608a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800608c:	e04f      	b.n	800612e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006094:	d04b      	beq.n	800612e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006096:	f7fb f8ef 	bl	8001278 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d302      	bcc.n	80060ac <UART_WaitOnFlagUntilTimeout+0x30>
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e04e      	b.n	800614e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0304 	and.w	r3, r3, #4
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d037      	beq.n	800612e <UART_WaitOnFlagUntilTimeout+0xb2>
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2b80      	cmp	r3, #128	@ 0x80
 80060c2:	d034      	beq.n	800612e <UART_WaitOnFlagUntilTimeout+0xb2>
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b40      	cmp	r3, #64	@ 0x40
 80060c8:	d031      	beq.n	800612e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	f003 0308 	and.w	r3, r3, #8
 80060d4:	2b08      	cmp	r3, #8
 80060d6:	d110      	bne.n	80060fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2208      	movs	r2, #8
 80060de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 f839 	bl	8006158 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2208      	movs	r2, #8
 80060ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e029      	b.n	800614e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006108:	d111      	bne.n	800612e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 f81f 	bl	8006158 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2220      	movs	r2, #32
 800611e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e00f      	b.n	800614e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69da      	ldr	r2, [r3, #28]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	4013      	ands	r3, r2
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	429a      	cmp	r2, r3
 800613c:	bf0c      	ite	eq
 800613e:	2301      	moveq	r3, #1
 8006140:	2300      	movne	r3, #0
 8006142:	b2db      	uxtb	r3, r3
 8006144:	461a      	mov	r2, r3
 8006146:	79fb      	ldrb	r3, [r7, #7]
 8006148:	429a      	cmp	r2, r3
 800614a:	d0a0      	beq.n	800608e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
	...

08006158 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006158:	b480      	push	{r7}
 800615a:	b095      	sub	sp, #84	@ 0x54
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006168:	e853 3f00 	ldrex	r3, [r3]
 800616c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800616e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006170:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006174:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	461a      	mov	r2, r3
 800617c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800617e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006180:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006184:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800618c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e6      	bne.n	8006160 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3308      	adds	r3, #8
 8006198:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	e853 3f00 	ldrex	r3, [r3]
 80061a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	4b1e      	ldr	r3, [pc, #120]	@ (8006220 <UART_EndRxTransfer+0xc8>)
 80061a6:	4013      	ands	r3, r2
 80061a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3308      	adds	r3, #8
 80061b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1e5      	bne.n	8006192 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d118      	bne.n	8006200 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	e853 3f00 	ldrex	r3, [r3]
 80061da:	60bb      	str	r3, [r7, #8]
   return(result);
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f023 0310 	bic.w	r3, r3, #16
 80061e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	461a      	mov	r2, r3
 80061ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061ec:	61bb      	str	r3, [r7, #24]
 80061ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f0:	6979      	ldr	r1, [r7, #20]
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	e841 2300 	strex	r3, r2, [r1]
 80061f8:	613b      	str	r3, [r7, #16]
   return(result);
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1e6      	bne.n	80061ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2220      	movs	r2, #32
 8006204:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006214:	bf00      	nop
 8006216:	3754      	adds	r7, #84	@ 0x54
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	effffffe 	.word	0xeffffffe

08006224 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006232:	2b01      	cmp	r3, #1
 8006234:	d101      	bne.n	800623a <HAL_UARTEx_DisableFifoMode+0x16>
 8006236:	2302      	movs	r3, #2
 8006238:	e027      	b.n	800628a <HAL_UARTEx_DisableFifoMode+0x66>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2224      	movs	r2, #36	@ 0x24
 8006246:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0201 	bic.w	r2, r2, #1
 8006260:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006268:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2220      	movs	r2, #32
 800627c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d101      	bne.n	80062ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062aa:	2302      	movs	r3, #2
 80062ac:	e02d      	b.n	800630a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2224      	movs	r2, #36	@ 0x24
 80062ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0201 	bic.w	r2, r2, #1
 80062d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f850 	bl	8006390 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2220      	movs	r2, #32
 80062fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b084      	sub	sp, #16
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006322:	2b01      	cmp	r3, #1
 8006324:	d101      	bne.n	800632a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006326:	2302      	movs	r3, #2
 8006328:	e02d      	b.n	8006386 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2224      	movs	r2, #36	@ 0x24
 8006336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 0201 	bic.w	r2, r2, #1
 8006350:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f812 	bl	8006390 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2220      	movs	r2, #32
 8006378:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800639c:	2b00      	cmp	r3, #0
 800639e:	d108      	bne.n	80063b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063b0:	e031      	b.n	8006416 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063b2:	2310      	movs	r3, #16
 80063b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063b6:	2310      	movs	r3, #16
 80063b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	0e5b      	lsrs	r3, r3, #25
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	f003 0307 	and.w	r3, r3, #7
 80063c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	0f5b      	lsrs	r3, r3, #29
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	f003 0307 	and.w	r3, r3, #7
 80063d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063da:	7bbb      	ldrb	r3, [r7, #14]
 80063dc:	7b3a      	ldrb	r2, [r7, #12]
 80063de:	4911      	ldr	r1, [pc, #68]	@ (8006424 <UARTEx_SetNbDataToProcess+0x94>)
 80063e0:	5c8a      	ldrb	r2, [r1, r2]
 80063e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063e6:	7b3a      	ldrb	r2, [r7, #12]
 80063e8:	490f      	ldr	r1, [pc, #60]	@ (8006428 <UARTEx_SetNbDataToProcess+0x98>)
 80063ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
 80063fa:	7b7a      	ldrb	r2, [r7, #13]
 80063fc:	4909      	ldr	r1, [pc, #36]	@ (8006424 <UARTEx_SetNbDataToProcess+0x94>)
 80063fe:	5c8a      	ldrb	r2, [r1, r2]
 8006400:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006404:	7b7a      	ldrb	r2, [r7, #13]
 8006406:	4908      	ldr	r1, [pc, #32]	@ (8006428 <UARTEx_SetNbDataToProcess+0x98>)
 8006408:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800640a:	fb93 f3f2 	sdiv	r3, r3, r2
 800640e:	b29a      	uxth	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006416:	bf00      	nop
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	08006ad4 	.word	0x08006ad4
 8006428:	08006adc 	.word	0x08006adc

0800642c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800642c:	b084      	sub	sp, #16
 800642e:	b580      	push	{r7, lr}
 8006430:	b084      	sub	sp, #16
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	f107 001c 	add.w	r0, r7, #28
 800643a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800643e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006442:	2b01      	cmp	r3, #1
 8006444:	d121      	bne.n	800648a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	4b2c      	ldr	r3, [pc, #176]	@ (8006508 <USB_CoreInit+0xdc>)
 8006458:	4013      	ands	r3, r2
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800646a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800646e:	2b01      	cmp	r3, #1
 8006470:	d105      	bne.n	800647e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 faaa 	bl	80069d8 <USB_CoreReset>
 8006484:	4603      	mov	r3, r0
 8006486:	73fb      	strb	r3, [r7, #15]
 8006488:	e01b      	b.n	80064c2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fa9e 	bl	80069d8 <USB_CoreReset>
 800649c:	4603      	mov	r3, r0
 800649e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064a0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d106      	bne.n	80064b6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	639a      	str	r2, [r3, #56]	@ 0x38
 80064b4:	e005      	b.n	80064c2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064c2:	7fbb      	ldrb	r3, [r7, #30]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d116      	bne.n	80064f6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80064d6:	4b0d      	ldr	r3, [pc, #52]	@ (800650c <USB_CoreInit+0xe0>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f043 0206 	orr.w	r2, r3, #6
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f043 0220 	orr.w	r2, r3, #32
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006502:	b004      	add	sp, #16
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	ffbdffbf 	.word	0xffbdffbf
 800650c:	03ee0000 	.word	0x03ee0000

08006510 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f023 0201 	bic.w	r2, r3, #1
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b084      	sub	sp, #16
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	460b      	mov	r3, r1
 800653c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800653e:	2300      	movs	r3, #0
 8006540:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800654e:	78fb      	ldrb	r3, [r7, #3]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d115      	bne.n	8006580 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006560:	200a      	movs	r0, #10
 8006562:	f7fa fe95 	bl	8001290 <HAL_Delay>
      ms += 10U;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	330a      	adds	r3, #10
 800656a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fa25 	bl	80069bc <USB_GetMode>
 8006572:	4603      	mov	r3, r0
 8006574:	2b01      	cmp	r3, #1
 8006576:	d01e      	beq.n	80065b6 <USB_SetCurrentMode+0x84>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2bc7      	cmp	r3, #199	@ 0xc7
 800657c:	d9f0      	bls.n	8006560 <USB_SetCurrentMode+0x2e>
 800657e:	e01a      	b.n	80065b6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006580:	78fb      	ldrb	r3, [r7, #3]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d115      	bne.n	80065b2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006592:	200a      	movs	r0, #10
 8006594:	f7fa fe7c 	bl	8001290 <HAL_Delay>
      ms += 10U;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	330a      	adds	r3, #10
 800659c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fa0c 	bl	80069bc <USB_GetMode>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d005      	beq.n	80065b6 <USB_SetCurrentMode+0x84>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2bc7      	cmp	r3, #199	@ 0xc7
 80065ae:	d9f0      	bls.n	8006592 <USB_SetCurrentMode+0x60>
 80065b0:	e001      	b.n	80065b6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e005      	b.n	80065c2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2bc8      	cmp	r3, #200	@ 0xc8
 80065ba:	d101      	bne.n	80065c0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e000      	b.n	80065c2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
	...

080065cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065cc:	b084      	sub	sp, #16
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b086      	sub	sp, #24
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
 80065d6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80065da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065e6:	2300      	movs	r3, #0
 80065e8:	613b      	str	r3, [r7, #16]
 80065ea:	e009      	b.n	8006600 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	3340      	adds	r3, #64	@ 0x40
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	2200      	movs	r2, #0
 80065f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	3301      	adds	r3, #1
 80065fe:	613b      	str	r3, [r7, #16]
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	2b0e      	cmp	r3, #14
 8006604:	d9f2      	bls.n	80065ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006606:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800660a:	2b00      	cmp	r3, #0
 800660c:	d11c      	bne.n	8006648 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800661c:	f043 0302 	orr.w	r3, r3, #2
 8006620:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006626:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	e005      	b.n	8006654 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800664c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800665a:	461a      	mov	r2, r3
 800665c:	2300      	movs	r3, #0
 800665e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006660:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006664:	2b01      	cmp	r3, #1
 8006666:	d10d      	bne.n	8006684 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006668:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800666c:	2b00      	cmp	r3, #0
 800666e:	d104      	bne.n	800667a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006670:	2100      	movs	r1, #0
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f968 	bl	8006948 <USB_SetDevSpeed>
 8006678:	e008      	b.n	800668c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800667a:	2101      	movs	r1, #1
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f963 	bl	8006948 <USB_SetDevSpeed>
 8006682:	e003      	b.n	800668c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006684:	2103      	movs	r1, #3
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f95e 	bl	8006948 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800668c:	2110      	movs	r1, #16
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f8fa 	bl	8006888 <USB_FlushTxFifo>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f924 	bl	80068ec <USB_FlushRxFifo>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066b4:	461a      	mov	r2, r3
 80066b6:	2300      	movs	r3, #0
 80066b8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066c0:	461a      	mov	r2, r3
 80066c2:	2300      	movs	r3, #0
 80066c4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066cc:	461a      	mov	r2, r3
 80066ce:	2300      	movs	r3, #0
 80066d0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066d2:	2300      	movs	r3, #0
 80066d4:	613b      	str	r3, [r7, #16]
 80066d6:	e043      	b.n	8006760 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066ee:	d118      	bne.n	8006722 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10a      	bne.n	800670c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006702:	461a      	mov	r2, r3
 8006704:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	e013      	b.n	8006734 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006718:	461a      	mov	r2, r3
 800671a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	e008      	b.n	8006734 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	4413      	add	r3, r2
 800672a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800672e:	461a      	mov	r2, r3
 8006730:	2300      	movs	r3, #0
 8006732:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006740:	461a      	mov	r2, r3
 8006742:	2300      	movs	r3, #0
 8006744:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006752:	461a      	mov	r2, r3
 8006754:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006758:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	3301      	adds	r3, #1
 800675e:	613b      	str	r3, [r7, #16]
 8006760:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006764:	461a      	mov	r2, r3
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	4293      	cmp	r3, r2
 800676a:	d3b5      	bcc.n	80066d8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800676c:	2300      	movs	r3, #0
 800676e:	613b      	str	r3, [r7, #16]
 8006770:	e043      	b.n	80067fa <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4413      	add	r3, r2
 800677a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006784:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006788:	d118      	bne.n	80067bc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10a      	bne.n	80067a6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800679c:	461a      	mov	r2, r3
 800679e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80067a2:	6013      	str	r3, [r2, #0]
 80067a4:	e013      	b.n	80067ce <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067b2:	461a      	mov	r2, r3
 80067b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80067b8:	6013      	str	r3, [r2, #0]
 80067ba:	e008      	b.n	80067ce <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067c8:	461a      	mov	r2, r3
 80067ca:	2300      	movs	r3, #0
 80067cc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067da:	461a      	mov	r2, r3
 80067dc:	2300      	movs	r3, #0
 80067de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ec:	461a      	mov	r2, r3
 80067ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80067f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	3301      	adds	r3, #1
 80067f8:	613b      	str	r3, [r7, #16]
 80067fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80067fe:	461a      	mov	r2, r3
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	4293      	cmp	r3, r2
 8006804:	d3b5      	bcc.n	8006772 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006814:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006818:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006826:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006828:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800682c:	2b00      	cmp	r3, #0
 800682e:	d105      	bne.n	800683c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	f043 0210 	orr.w	r2, r3, #16
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	699a      	ldr	r2, [r3, #24]
 8006840:	4b0f      	ldr	r3, [pc, #60]	@ (8006880 <USB_DevInit+0x2b4>)
 8006842:	4313      	orrs	r3, r2
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006848:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800684c:	2b00      	cmp	r3, #0
 800684e:	d005      	beq.n	800685c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	f043 0208 	orr.w	r2, r3, #8
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800685c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006860:	2b01      	cmp	r3, #1
 8006862:	d105      	bne.n	8006870 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	699a      	ldr	r2, [r3, #24]
 8006868:	4b06      	ldr	r3, [pc, #24]	@ (8006884 <USB_DevInit+0x2b8>)
 800686a:	4313      	orrs	r3, r2
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006870:	7dfb      	ldrb	r3, [r7, #23]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800687c:	b004      	add	sp, #16
 800687e:	4770      	bx	lr
 8006880:	803c3800 	.word	0x803c3800
 8006884:	40000004 	.word	0x40000004

08006888 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	3301      	adds	r3, #1
 800689a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068a2:	d901      	bls.n	80068a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e01b      	b.n	80068e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	daf2      	bge.n	8006896 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80068b0:	2300      	movs	r3, #0
 80068b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	019b      	lsls	r3, r3, #6
 80068b8:	f043 0220 	orr.w	r2, r3, #32
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	3301      	adds	r3, #1
 80068c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068cc:	d901      	bls.n	80068d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e006      	b.n	80068e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	f003 0320 	and.w	r3, r3, #32
 80068da:	2b20      	cmp	r3, #32
 80068dc:	d0f0      	beq.n	80068c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	3301      	adds	r3, #1
 80068fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006904:	d901      	bls.n	800690a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e018      	b.n	800693c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	daf2      	bge.n	80068f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2210      	movs	r2, #16
 800691a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	3301      	adds	r3, #1
 8006920:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006928:	d901      	bls.n	800692e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e006      	b.n	800693c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f003 0310 	and.w	r3, r3, #16
 8006936:	2b10      	cmp	r3, #16
 8006938:	d0f0      	beq.n	800691c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	460b      	mov	r3, r1
 8006952:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	68f9      	ldr	r1, [r7, #12]
 8006964:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006968:	4313      	orrs	r3, r2
 800696a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800697a:	b480      	push	{r7}
 800697c:	b085      	sub	sp, #20
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006994:	f023 0303 	bic.w	r3, r3, #3
 8006998:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069a8:	f043 0302 	orr.w	r3, r3, #2
 80069ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	f003 0301 	and.w	r3, r3, #1
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	3301      	adds	r3, #1
 80069e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069f0:	d901      	bls.n	80069f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e01b      	b.n	8006a2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	daf2      	bge.n	80069e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069fe:	2300      	movs	r3, #0
 8006a00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	f043 0201 	orr.w	r2, r3, #1
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3301      	adds	r3, #1
 8006a12:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a1a:	d901      	bls.n	8006a20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e006      	b.n	8006a2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d0f0      	beq.n	8006a0e <USB_CoreReset+0x36>

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3714      	adds	r7, #20
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <memset>:
 8006a3a:	4402      	add	r2, r0
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d100      	bne.n	8006a44 <memset+0xa>
 8006a42:	4770      	bx	lr
 8006a44:	f803 1b01 	strb.w	r1, [r3], #1
 8006a48:	e7f9      	b.n	8006a3e <memset+0x4>
	...

08006a4c <__libc_init_array>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	4d0d      	ldr	r5, [pc, #52]	@ (8006a84 <__libc_init_array+0x38>)
 8006a50:	4c0d      	ldr	r4, [pc, #52]	@ (8006a88 <__libc_init_array+0x3c>)
 8006a52:	1b64      	subs	r4, r4, r5
 8006a54:	10a4      	asrs	r4, r4, #2
 8006a56:	2600      	movs	r6, #0
 8006a58:	42a6      	cmp	r6, r4
 8006a5a:	d109      	bne.n	8006a70 <__libc_init_array+0x24>
 8006a5c:	4d0b      	ldr	r5, [pc, #44]	@ (8006a8c <__libc_init_array+0x40>)
 8006a5e:	4c0c      	ldr	r4, [pc, #48]	@ (8006a90 <__libc_init_array+0x44>)
 8006a60:	f000 f818 	bl	8006a94 <_init>
 8006a64:	1b64      	subs	r4, r4, r5
 8006a66:	10a4      	asrs	r4, r4, #2
 8006a68:	2600      	movs	r6, #0
 8006a6a:	42a6      	cmp	r6, r4
 8006a6c:	d105      	bne.n	8006a7a <__libc_init_array+0x2e>
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}
 8006a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a74:	4798      	blx	r3
 8006a76:	3601      	adds	r6, #1
 8006a78:	e7ee      	b.n	8006a58 <__libc_init_array+0xc>
 8006a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a7e:	4798      	blx	r3
 8006a80:	3601      	adds	r6, #1
 8006a82:	e7f2      	b.n	8006a6a <__libc_init_array+0x1e>
 8006a84:	08006aec 	.word	0x08006aec
 8006a88:	08006aec 	.word	0x08006aec
 8006a8c:	08006aec 	.word	0x08006aec
 8006a90:	08006af0 	.word	0x08006af0

08006a94 <_init>:
 8006a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a96:	bf00      	nop
 8006a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9a:	bc08      	pop	{r3}
 8006a9c:	469e      	mov	lr, r3
 8006a9e:	4770      	bx	lr

08006aa0 <_fini>:
 8006aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa2:	bf00      	nop
 8006aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa6:	bc08      	pop	{r3}
 8006aa8:	469e      	mov	lr, r3
 8006aaa:	4770      	bx	lr
